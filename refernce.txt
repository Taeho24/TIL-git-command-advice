## 브랜치

### 정의
- 영어사전: 가지
- git에서의 정의: A brnach in Git is simply a lightweight movable pointer to one of these commit
- 실무에서: 새로운 작업(기능 개발, 버그 수정 등)을 시작할 때 만든다.

### 명령어
1. 브랜치 생성: `git branch 브랜치이름`
2. 생성되어있는 브랜치 보기
    - `git branch` 혹은 `git branch -r`
3. 다른 브랜치로 전환하기
    - `git checkout 브랜치명`
    - `git switch 브랜치명`
4. 브랜치 만들고, 전환까지 동시에 하기
    - `git checkout -b 브랜치명`

#### refernce

00. 브랜치 삭제하기
    - `git branch -d 브랜치명`
01. 브랜치 병합하기
    - `git rebase 병합하고 싶은 브랜치명`
    - `git merge 병합하고 싶은 브랜치명`

## 작업 프로세스
공동 작업을 할 때는 다음과 같은 프로세스로 진행한다.

01. 이슈를 만든다.
02. 이슈에 해당하는 브랜치를 만든다.
03. 2에서 만든 브랜치에 커밋을 만든다.
    - 이때 커밋 메시지엔 이슈 번호를 적어서, 이슈 트레커와 커밋을 연동시킨다.
04. git push 명령어를 사용해서 작업중인 브랜치에 있는 모든 커밋들을 원격 저장소에 push 한다.
    - `git push -u origin 브랜치이름`
    - `git push`
05. 원격 저장소에서 Pull Request(Merge Reqest)를 생성한다.
06. 코드 리뷰를 받는다(선택).
07. PR(Pull Request)를 마무리한다(Merge).

## 로컬 저장소와 원격 저장소 동기화하기

### fetch
    - `git fetch`명령어를 사용하면 원격 저장소의 브랜치에 있는 커밋 내역이, 로컬저장소로 '가져와진다'.

### PUSH
    - `git push` 명령어를 사용하면 로컬 저장소의 브랜치에 있는 커밋들을 원격 저장소에 특정 브랜치로 push해서 동기화 할 수 있다.

## 커밋 되돌리기
### git reset
- `git reset`을 사용하면 현재 체크아웃한 브랜치의 원하는 과거 커밋으로 HEAD를 이동시키고, 그 이후의 커밋들은 모두 버릴 수 있습니다. 원치 않는 커밋을 되돌릴 때 유용한 명령어 입니다.

- [참고자료](https://violet-bora-lee.github.io/git-tutorial/#reset)

### git revert
- 이미 push되어서 팀원간에 공유되고 있는 컴싯을 되돌릴 댼 `git reset`을 사용할 수 없습니다. 대신 `git revert`를 사용해야 합니다.
- `git revert`는 장애 상황을해결할 때 많이 사용 합니다. 장애를 유발시킨 코드가 들어가있는 커밋만 revert 시키고 다시 배포하는 식으로 장애를 빠르게 해결할 수 있습니다.



'저장'이라는 용어 대신 '커밋(commit)'이라는 용어를 쓴다
수동 저장을 더 권장한다
(잘못된 코드가 같이 저장될 경우도 있어서)

auto save기능 적극활용
lerna
github cosmos-kit
.git이라는 숨김파일이 있으면 저장소임
커밋 이력(히스토리)는 .git 폴더에 있음

과제전형
"이 사람이 코딩을 할 때 이력을 잘 작성해서 썼는지"
.git 폴더를 지우면, 저장소가 일반 폴더가 된다.
git init 명령어 입력시, 해당 경로에 있는 폴더가 일반 폴더에서 저장가 된다.

https://github.com/boostcampwm-2022
이슈트랙커
commit 메시지 에 연동

마크다운 문법공부!

`git remote add origin [깃헙주소]`
- [깃헙주소]를 origin 이라는 명칭으로 즐겨찾기생성
`git init` (Master branch .git 저장소 생성)
`git branch -M main` (Master branch를 Main branch로 변경)
`git push origin main `

# 2024-03-21
//default branch가 master이름일때 main으로 바꾸는법
git branch -m master main
git fetch origin
git branch -u origin/main main  (or)  git push --set-upstream origin main
git remote set-head origin -a
//git hub 참조 명령문


`git chechout [branch이름]`
`git switch [branch이름]`
// branch간 이동 명령어
`git branch` // 현재 branch 목록

`git reset HEAD~2`// 커밋 2줄 삭제

`git reset^` // 이전 커밋 상황으로 돌아가기
`git push -f`
//commit 기록 삭제

https://git-school.github.io/visualizing-git/
//가상 merge grape 시각화 사이트

`git merge --abort`
//merge 충돌 해결
`git status` or 검색에 해결상황 검색

`git pull origin main`
== `git fetch origin main` + `git merge origin/main`임시 저장할 때 쓰는 명령어

`git stash`
`git stash pop` // 임시저장 내용 불러오기

