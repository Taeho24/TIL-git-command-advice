# c code complier install

~$ sudo apt install gcc

~$ gcc -- version // 버전확인

~$ gcc test.c // a.out test.c test.o test.s

~$ ./a.out //실행

# gcc Options

## complie only
~$ gcc -S test.c // test.s // 어셈블리코드

## complie and assemble : object_file
~$ gcc -c test.c // test.o // 오브젝트코드 // linking작업 X
~$ objdump -S test.o // 오브젝트코드 내용 확인

## resulting file into the filename specified instead of the default one
~$ gcc -o test.c <filename> // <filename>.out

## Include debugging smbols // gdb
~$ gcc -g test.c // 디버깅 정보를 담는 옵션 // 실행파일 생성후 gdb이용 debug
~$ gcc -Og test.c // 디버깅을 위한 최적화 옵션

~$ gcc -o test-w-g -g test.c // with -g option // Debugging Information
~$ gcc -o test-wo-g  test.c // without -g option // No debugging Information


## Show all (most) warnings
~$ gcc test.c -Wall // 초기화하지 않은 변수값 Warning Message // warning message가 출력되도 명령어 실행은 가능하다.

## Optimizations

-O0 // "no optimization" default option
-O1 ~ -O3 // various degrees of optimizatioin targeted for speed
-Os // targets generated code size // 코드의 사이즈를 최적화시켜 크기를 줄이는 옵션(*-O2의 기능을 포함) 


## Search the library named library when linking: -l
~$ (-lc) gcc (-O0) test.c //생략된 명령어를 실행한 것 이라는 뜻

---
## Add directory to the list of directories to be searhed for -I : -L
ex. gcc -I -I ... // -I: header file(.h)의 위치를 알려주는 옵션 // -Ihead.h // #include "head.h" 
```-I(헤더 파일 디렉토리 지정)
$ gcc -I /path/to/headers source.c -o output
$ gcc -I /home/user/include my_program.c -o my_program
// /home/user/include 디렉토리에서 #include "my_header.h"를 찾게 됩니다.
```
```-L(라이브러리 파일 디렉토리 지정)
$ gcc -L /path/to/libs -l library_name source.c -o output
$ gcc -L /home/user/libs -l mylib my_program.c -o my_program
// /home/user/libs 디렉토리에서 libmylib.so 라이브러리를 찾아서 링크합니다.
```

1. `-I`는 컴파일러가 헤더 파일을 찾을 디렉토리를 지정하는 것이고, `-L`은 링커가 라이브러리를 찾을 디렉토리를 지정하는 것입니다.

2. `-l` 옵션은 특정 라이브러리 파일을 링커에 전달하는 역할을 하며, `-L`로 지정된 경로에서 해당 라이브러리를 찾습니다.

--- 

### `-I` 옵션이 필요 없는 이유  
- "같은 디렉터리"에 있는 경우, `#include "*.h"`를 사용하면 자동으로 찾을 수 있습니다.  
- 기본적으로 GCC는 같은 디렉터리에서 헤더 파일을 찾기 때문에 `-I.` 같은 옵션이 없어도 문제가 없습니다.  

### `-I` 옵션이 필요한 경우  
만약 `*.h`가 다른 디렉터리(예: `include/` 폴더)에 있다면, 다음과 같이 `-I` 옵션을 추가해야 합니다:  
```makefile
main.o: main.c
	gcc -c main.c -I include
```

그리고 `main.c`에서 헤더를 포함할 때는 이렇게 수정해야 합니다:  
```c
#include "*.h"  // 같은 디렉터리일 경우
// OR
#include <*.h>  // -I 옵션을 사용하여 지정한 디렉터리에서 찾을 경우
```
---
