//Make <설정 명령어> like 단축키(alias)

For example, if one project's source files

- ccountln.h, ccountln.c
- fileops.h, fileops.c
- process.h, process.c
- parser.h, parser.c

main 함수는 8개의 파일 중 하나

# one by one:
- ~$ gcc -g -Wall -c ccountln.c
- ~$ gcc -g -Wall -c parser.c
- ~$ gcc -g -Wall -c fileops.c
- ~$ gcc -g -Wall -c process.c
and
- ~$ gcc ccountln.o parser.o fileops.o process.o -o ccountln

or Use one command
- ~$ gcc -g -Wall ccountln.c parser.c fileops.c process.c -o ccountln


# Makefile

$ sudo apt install make

-------------------------------------------------------
> example 1.
# Simple Makefile with use of gcc could look like this
CC=gcc
CFLAGS=-g -Wall
OBJ=ccountln.o parser.o fileops.o process.o
EXE=ccountln

all: $(EXE)

$(EXE): $(OBJ)
    $(CC) $(OBJ) -o $(EXE)

Ccountln.o: ccountln.h ccountln.c
    $(CC) $(CFLAGS) -c ccountln.c

...
-------------------------------------------------------

---
> example 2.
01 # Makefile
02
03 CC=gcc
04 CFLAGS=
05 OBJS=ch1_3_main.o ch1_3_addnum.o
06 LIBS=
07 all : add.out
08
09 add.out : $(OBJS)
10 $(CC) $(CFLAGS) -o add.out $(OBJS) $(LIBS)
11
12 ch1_3_main.o : ch1_3_main.c
13 $(CC) $(CFLAGS) -c ch1_3_main.c
14 ch1_3_addnum.o : ch1_3_addnum.c
15 $(CC) $(CFLAGS) -c ch1_3_addnum.c
16
17 clean:
18 rm -f $(OBJS) add.out *.o core
-------------------------------------------------------
---
-------------------------------------------------------
> 실행 예시
$ ls
Makefile ch1_3_addnum.c ch1_3_main.c
$ make
gcc -c ch1_3_main.c
gcc -c ch1_3_addnum.c
gcc -o add.out ch1_3_main.o ch1_3_addnum.o
$ ls
Makefile add.out ch1_3_addnum.c ch1_3_addnum.o ch1_3_main.c ch1_3_main.o
$ add.out
Sum 1~5 = 15
$ make clean
rm -f ch1_3_main.o ch1_3_addnum.o add.out *.o core
$ ls
Makefile ch1_3_addnum.c ch1_3_main.c
-------------------------------------------------------
---

# -Wextra와 -Wall의 차이점:
- Wall 옵션은 일반적으로 코드에서 많이 발생할 수 있는 주요 경고들을 활성화합니다.

- Wextra 옵션은 -Wall에 포함되지 않은 추가적인 경고들을 활성화합니다.
    - 기본적인 스타일 경고: 변수나 함수 선언에서 불필요한 코드, 예를 들어 선언되었지만 사용되지 않는 변수 등을 경고합니다.

    - 불필요한 return 값 경고: 함수가 값을 반환하는데 그 값을 사용하지 않는 경우 경고합니다.

    - 사용되지 않는 매개변수 경고: 함수의 매개변수가 선언되었지만 사용되지 않으면 경고합니다.

    - 기타 경고: -Wall 옵션이 활성화한 경고 외에 추가적인 유용한 경고들을 포함합니다.


# `.PHONY` : Makefile에서 실제 파일과 관계없이 항상 실행되어야 하는 타겟을 명시하는 데 사용되는 특별한 지시어

1. `.PHONY`는 필수적인 요소는 아니지만, 파일 이름과 충돌할 가능성이 있는 타겟에는 명시적으로 사용하는 것이 좋습니다.

2. 만약 타겟 이름이 파일 이름과 겹칠 수 없다면, `.PHONY`를 생략해도 문제는 발생하지 않습니다.

3. `.PHONY`를 사용하면 파일과 타겟 이름 충돌을 방지하고, 타겟이 항상 실행되도록 보장할 수 있습니다.
