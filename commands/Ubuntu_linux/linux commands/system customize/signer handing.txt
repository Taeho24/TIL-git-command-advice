# 시그널 (Signal)

- 소프트웨어 인터럽트로 프로세스에 뭔가 발생했음을 알리는 간단한 메시지를 비동기적으로 보내는 것

- 0으로 나누기처럼 프로그램에 예외적인 상황이 일어나는 경우나 프로세스가 함수를 사용해 다른 프로세스에 시그널을 보내는 경우에 발생
- 보통 시그널로 전달되는 메시지는 무엇이 발생했는지를 표시하는 미리 정의된 상수를 사용
- 시그널을 받은 프로세스는 시그널에 따른 (1)기본 동작을 수행하거나, (2)시그널을 무시하거나, 시그널 처리를 위해 특별히 (3)지정된 함수를 수행


- 시그널 핸들러(Signal Handler)
    - 프로세스를 종료하기 전에 처리할 작업이 남아 있는 경우, 특정 시그널은 종료하고 않고자 하는 경우 시그널을 처리하는 함수를 지정하는 것

- 시그널 집합
    - POSIX에서 복수의 시그널을 처리하기 위해 도입한 개념
    - 시그널 집합을 사용하면 여러 시그널을 지정해 처리할 수 있음

- 시그널 제어 함수
    - sigaction() 함수는 시그널을 받아 이를 처리할 시그널 핸들러를 지정할 뿐만 아니라 플래그를 설정해 시그널 처리 과정을 제어할 수도 있음

- 알람 시그널
    - 일정 시간이 지난 후에 자동으로 시그널이 발생하도록 함
    - 일정 시간 후에 한 번 발생시킬 수도 있고, 일정한 시간 간격을 두고 주기적으로 알람 시그널을 발생시킬 수도 있음

--- 

## 시그널이란?
- 시그널은 소프트웨어 인터럽트
- 시그널은 비동기적(CPU의 clock에 영향X)으로 발생하며, 리눅스 운영체제가 프로세스에 전달
- 시그널은 다음과 같은 세 가지 경우에 발생
    1. 0으로 나누기처럼 프로그램에서 예외적인 상황이 일어나는 경우
    2. 프로세스가 `kill()` 함수와 같이 시그널을 보낼 수 있는 함수를 사용해 다른 프로세스에 시그널을 보내는 경우
    3. 사용자가 `Ctrl + C` 같은 인터럽트 키를 입력한 경우

- 기본 동작 수행
    - 대부분 시그널의 기본 동작은 프로세스를 종료하는 것
    - 이 외에 시그널을 무시하거나 프로세스 수행 일시 중지/재시작 등을 기본 동작으로 수행

- 시그널 무시
    - 프로세스가 시그널을 무시하기로 지정하면 시스템은 프로세스에 시그널을 전달하지 않음

- 지정된 함수 호출
    - 프로세스는 시그널의 처리를 위해 미리 함수를 지정해놓고 시그널을 받으면 해당 함수를 호출해 처리
    - 시그널 핸들러(Signal Handler): 시그널 처리를 위해 지정하는 함수
    - 시그널을 받으면 기존 처리 작업을 중지한 후 시그널 핸들러를 호출
    - 시그널 핸들러의 동작이 완료되면 기존 처리 작업을 계속 수행

- 시그널의 종류
    - 리눅스에서 사용되는 시그널의 개수는 시스템과 아키텍처에 따라 약간씩 다름
    - 일반적인 리눅스 시스템
        - `~$ kill -l`로 확인 가능
        - <signal.h> 파일에 정의
        - 1~31번까지의 표준 시그널(Standard Signals)
        - 32번 이상 확장 시그널(Real-time Signals)

## 주요 시그널 목록

| 시그널     | 번호 | 기본 처리   | 발생 요건                                                |
|------------|------|--------------|-------------------------------------------------------|
| SIGINT     | 2    | 종료         | 사용자가 `Ctrl+C`를 입력하면 발생                       |
| SIGQUIT    | 3    | 코어 덤프    | 사용자가 `Ctrl+\`를 입력하면 발생                       |
| SIGABRT    | 6    | 코어 덤프    | `abort()` 함수 호출 시 발생                             |
| SIGKILL    | 9    | 종료         | 강제 종료, 무시하거나 핸들링할 수 없음                   |
| SIGUSR1    | 10   | 종료         | 사용자 정의 시그널 1, 프로세스 간 사용자 정의 통신에 사용 |
| SIGUSR2    | 12   | 종료         | 사용자 정의 시그널 2                                    |
| SIGALRM    | 14   | 종료         | `alarm()` 함수 호출 후 시간 경과 시 발생                |
| SIGCHLD    | 17   | 무시         | 자식 프로세스의 상태가 바뀌었을때 발생                   |
| SIGCONT    | 18   | 무시         | 중지된 프로세스를 재시작 할때 발생                       |
| SIGSTOP    | 19   | 중지         | 중지(STOP)시그널, SIGCONT 시그널은 받을때까지 프로세스 수행 중단 (핸들링 불가) |
| SIGTSTP    | 20   | 중지         | 사용자가 `Ctrl+Z`를 입력 시 발생                        |


## 시그널 종류

### 표준 시그널 (Standard Signals)

| 항목       | 내용                                                     |
|------------|---------------------------------------------------------|
| 번호 범위  | 1 ~ 31                                                   |
| 예시       | `SIGINT`, `SIGTERM`, `SIGKILL`, `SIGSEGV`, `SIGCHLD` 등  |
| 큐잉 지원  | 같은 시그널 여러 번 보내도 1회로 처리됨                    |
| 우선순위   | 없음                                                     |
| 처리 순서  | 도착 시 즉시 처리 (시그널 핸들러 등록 시)                  |
| 용도       | 전통적 시스템 이벤트 처리 (중단, 종료, 예외 등)            |

### 실시간 시그널 (Real-time Signals)

| 항목       | 내용                                                     |
|------------|---------------------------------------------------------|
| 번호 범위  | 보통 32 ~ 64 (glibc 기준 `SIGRTMIN` ~ `SIGRTMAX`)        |
| 예시       | `SIGRTMIN + n` (사용자 정의 목적)                        |
| 큐잉 지원  | 여러 개의 시그널이 순서대로 큐에 저장됨                    |
| 우선순위   | 낮은 번호 우선 처리                                       |
| 처리 순서  | 도착 순서대로 정확히 처리 가능                            |
| 용도       | 고정밀 IPC, 커널-유저 공간 통신 등                        |


--- 

## 시그널 보내기: kill(2)
```
#include <sys/types.h>
#include <signal.h>
int kill(pid_t pid, int sig);
```
pid_t pid : 시그널을 받을 프로세스의 PID 
int sig : pid로 지정한 프로세스에 보내는 시그널

- pid에 대응하는 프로세스에 sig로 지정한 시그널을 전송
- pid는 특정 프로세스 또는 프로세스 그룹을 의미
- sig에 0(널 시그널)을 지정하면 실제로 시그널을 보내지 않고 오류를 확인, 예를 들면, pid가 정상인지 검사

- pid에 지정한 값에 따라 시그널을 어떻게 보낼 것인지를 결정
- pid가 0보다 큰 수 : pid로 지정한 프로세스에 시그널을 전송
- pid가 -1이 아닌 음수 : 프로세스 그룹 ID가 pid의 절댓값인 프로세스 그룹에 속하고 시그널을 보낼 권한이 있는 모든 프로세스에 시그널을 전송
- pid가 0 : 특별한 프로세스(스케줄러 등)를 제외하고 프로세스 그룹 ID가 시그널을 보내는 프로세스의 프로세스 그룹 ID와 같은 모든 프로세스에 시그널을 전송
- pid가 -1 : 시그널을 보내는 프로세스의 유효 사용자 ID가 root(수퍼 유저)가 아니면, 특별한 프로세스를 제외하고 프로세스의 실제 사용자 ID가 시그널을 보내는 프로세스의 유효 사용자 ID와 같은 모든 프로세스에게 시그널을 전송
    - 즉, 접근 가능한 모든 프로세스에 시그널을 보냄


--- 

## 코어 덤프 파일이란?

- 코어 덤프(Core Dump)는 프로세스가 **비정상적으로 종료**될 때, 그 당시의 **메모리 상태를 저장한 파일**입니다.  
- **디버깅 목적**으로 사용되며, 프로그램이 **왜, 어디서, 어떻게** 죽었는지를 분석하는 데 중요한 단서를 제공합니다.

| 항목         | 설명                                                            |
|--------------|-----------------------------------------------------------------|
| 정의         | 프로세스가 크래시(예: segmentation fault) 되었을 때, 그 시점의 메모리 상태, 레지스터, 스택, 힙 정보 등을 담은 스냅샷 |
| 목적         | 프로그램의 버그, 메모리 오류, 예외 발생 원인을 디버깅하기 위해 사용 |
| 형식         | 이진 파일 (gdb 등 디버깅 도구로 해석 가능)                        |
| 생성 시점    | 보통 `SIGSEGV`, `SIGABRT`, `SIGFPE` 같은 치명적 시그널 수신 시    |
| 주요 사용 도구 | `gdb`, `coredumpctl`, `lldb` 등                                |

--- 

## 시그널 보내기 : raise(3)
```
#include <signal.h>         [함수 원형]
int raise(int sig);
```
int sig : 보내려는 시그널 번호

- raise() 함수는 호출한 프로세스에 인자로 지정한 시그널을 전송
- 만약 시그널 핸들러가 호출되면 시그널 핸들러의 수행이 끝날 때까지 raise() 함수는 리턴하지 않음
- 함수는 수행에 성공하면 0을, 실패하면 –1을 리턴

---

## 시그널 보내기 : abort(3)
```
#include <stdlib.h> [함수 원형]
void abort(void);
```

- 호출한 프로세스에 SIGABRT 시그널을 전송
- SIGABRT 시그널: 프로세스를 비정상적으로 종료시키고 코어 덤프 파일을 생성, 최소한 해당 프로세스가 연 파일은 모두 닫음
- SIGABRT 시그널은 abort() 함수는 raise(SIGABRT)와 같은 동작을 수행하 지만 프로세스를 종료시키므로 리턴하지 않음

--- 

## 시그널 핸들러 지정 : signal(3)
```
#include <signal.h>                         [함수 원형]
typedef void (*sighandler_t)(int);
sighandler_t signal(int signum, sighandler_t handler);
```
signum : 시그널 핸들러로 처리하려는 시그널
handler : 시그널 핸들러의 함수명

리턴값: 
    - 성공: **기존 핸들러 함수 포인터 반환**
    - 실패: SIG_ERR 반환
- 시그널을 처리하는 가장 단순한 함수로, 시그널을 받을 때 해당 시그널을 처리할 함수나 상수를 지정할 수 있음
- 첫 번째 인자인 signum에는 **SIGKILL(9)과 SIGSTOP(19) 시그널을 제외한 모든 시그널을 지정할 수 있음**
- 두 번째 인자인 handler에는 signum으로 지 정한 시그널을 받았을 때 처리할 방법을 지정

handler 설정
    - 시그널 핸들러 주소
    - SIG_IGN : 시그널을 무시하도록 지정
    - SIG_DFL : 시그널의 기본 처리 방법을 수행하도록 지정

- 버전 별 signal() 함수의 동작
- 시스템 V : 시그널을 처리한 후 시그널 처리 방법을 기본 처리 방법(SIG_DFL)으로 재설정,
    따라서 시그널 처리를 계속하려면 signal() 함수를 호출해 **시그널을 처리한 후 다시 signal() 함수를 설정해야 함**
- BSD : 시그널을 처리한 후 시그널 처리 방법을 기본 처리 방법(SIG_DFL)으로 재설정하지 않음,
    따라서 시그널 핸들러가 계속 동작
- 리눅스 : 커널의 signal(2) 시스템 콜은 시스템 V와 같은 방식으로 동작, 
    그러나 gcc의 glibc 2부터 signal(3) 함수는 호출하지 않고 sigaction(2)를 호출해 BSD 형식으로 동작

```signal()함수 예제
01 #include <unistd.h>
02 #include <signal.h>
03 #include <stdlib.h>
04 #include <stdio.h>
05
06 void sig_handler(int signo) {
07  printf("Signal Handler signum: %d\n", signo);
08  psignal(signo, "Received Signal");
09 }
---
> diff (솔라리스)
06 void sig_handler(int signo) {
07  void (*hand)(int);
08
09  hand = signal(SIGINT, sig_handler);
10  if (hand == SIG_ERR) {
11      perror("signal");
12      exit(1);
13  }
14  printf("Signal Handler Signal Number : %d\n", signo);
15  psignal(signo, "Received Signal");
16 }

---
10
11 int main() {
12  void (*hand)(int);
13
14  hand = signal(SIGINT, sig_handler);
15  if (hand == SIG_ERR) {
16      perror("signal");
17      exit(1);
18  }
19
20  printf("Wait 1st Ctrl+C... : SIGINT\n");
21  pause();
22  printf("After 1st Signal Handler\n");
23  printf("Wait 2nd Ctrl+C... : SIGINT\n");
24  pause();
25  printf("After 2nd Signal Handler\n");
26 }
```

--- 

## 시그널 핸들러 지정 : sigset()  ,외부적으론 signal()과 같음
```
#include <signal.h> [함수 원형]
sighandler_t sigset(int sig, sighandler_t disp);
```
sig : 시그널 핸들러로 처리하려는 시그널
disp : 시그널 핸들러의 함수명

- sigset() 함수의 인자 구조는 signal() 함수와 동일
- sigset() 함수도 첫 번째 인자인 sig 에 SIGKILL과 SIGSTOP 시그널을 제외한 어떤 시그널이든 지정할 수 있음
- 두 번째 인자인 disp에도 signal() 함수처럼 시그널 핸들러 함수의 주소나 SIG_IGN, SIG_DFL 중 하나를 지정해야 함

- 리턴값은 시그널 핸들러 함수의 주소
- sigset() 함수가 실패하면 SIG_ERR을 리턴

- 리눅스에서는 sigset() 함수를 제공하지만 사용을 권하지는 않음


---

## `signal()`과 `sigset()`의 공통점 및 차이점

### 공통점

| 항목         | 설명                                                                 |
|--------------|----------------------------------------------------------------------|
| 목적         | 특정 시그널 발생 시 실행할 시그널 핸들러를 등록                     |
| 인자         | 시그널 번호와 핸들러 함수 포인터를 전달                             |
| 반환값       | 이전에 등록된 핸들러의 함수 포인터 (또는 오류 시 `SIG_ERR`)         |
| 사용 환경    | UNIX, Linux 계열 시스템에서 모두 사용 가능                          |
| 사용 예      | `SIGINT`, `SIGTERM`, `SIGUSR1` 등의 사용자 정의 핸들링               |

### 차이점

| 항목              | `signal()`                                | `sigset()` (System V)                    |
|-------------------|--------------------------------------------|------------------------------------------|
| 표준 여부         | POSIX 표준 함수                           | System V 확장 함수 (비표준)              |
| 재설정 여부       | 일부 시스템에서는 시그널 처리 후 핸들러가 기본값으로 재설정됨 | 핸들러가 자동으로 유지됨 (재설정되지 않음) |
| 시그널 블록 여부  | 핸들러 실행 중 해당 시그널이 자동 블록되지 않음(일부 구현에서는 예외 존재) | 핸들러 실행 중 시그널이 자동으로 블록됨 |
| 대체 함수         | `sigaction()` 으로 대체 사용 권장          | `sigaction()` 사용 권장                  |
> ✅ **권장 사항**: 두 함수 모두 **현대 시스템에서는 `sigaction()`으로 대체**하여 사용하는 것이 더 안전하고 유연합니다.

--- 

# 시그널 집합

- 시그널을 비트 마스크로 표현한 것으로, 시그널 하나가 비트 하나를 가 킴
- 각 비트가 특정 시그널과 1:1로 연결되어 있음
- 비트값이 1이면 해당 시그널이 설정 된 것이고 0이면 시그널이 설정되지 않은 것
- 시스템에서는 시그널 집합의 처리를 위해 sigset_t라는 구조체를 제공

```Linux
typedef struct {
    unsigned long __val[_NSIG_WORDS];
} sigset_t;
```

--- 

## 시그널 집합 비우기 : sigemptyset(3)
```
#include <signal.h>             [함수 원형]
int sigemptyset(sigset_t *set);
```
set : 비우려는 시그널 집합의 주소

- 시스템에서 정의한 모든 시그널을 배제해 인자로 지정한 시그널 집합을 빈집합(empty set)으로 설정
- 즉, 시그널 집합의 모든 비트를 0으로 설정
- sigemptyset() 함수는 수행에 성공하면 0을, 실패하면 -1을 리턴

--- 

## 시그널 집합에 모든 시그널 설정 : sigfillset(3)
```
#include <signal.h>             [함수 원형]
int sigfillset(sigset_t *set);
```
set : 설정하려는 시그널 집합의 주소

- 인자로 받은 시그널 집합을 시스템에서 정의한 모든 시그널을 포함하는 집합으로 설정
- 즉, 시그널 집합의 모든 비트를 1로 설정
- sigfillset() 함수는 수행에 성공하면 0을, 실패하면 -1을 리턴

--- 

## 시그널 집합에 시그널 설정 추가 : sigaddset(3)
```
#include <signal.h>             [함수 원형]
int sigaddset(sigset_t *set, int signum);
```
set : 시그널을 추가하려는 시그널 집합의 주소
signum : 시그널 집합에 추가로 설정하려는 시그널

- signum으로 지정한 시그널을 set으로 지정한 시그널 집합에 추가
- sigaddset() 함수는 수행에 성공하면 0을, 실패하면 –1을 리턴

--- 

## 시그널 집합에서 시그널 설정 삭제 : sigdelset(3)
```
#include <signal.h>             [함수 원형]
int sigdelset(sigset_t *set, int signum);
```
set : 시그널을 삭제하려는 시그널 집합의 주소
signum : 시그널 집합에 삭제하려는 시그널

- signum으로 지정한 시그널을 set으로 지정한 시그널 집합에서 제거
- sigdelset() 함수는 수행에 성공하면 0을, 실패하면 –1을 리턴

--- 

## 시그널 집합에 설정된 시그널 확인 : sigismember(3)
```
#include <signal.h>             [함수 원형]
int sigismember(const sigset_t *set, int signum);
```
set : 확인하려는 시그널 집합의 주소
signum : 시그널 집합에 설정되었는지 확인하려는 시그널

- signum으로 지정한 시그널이 set으로 지정한 시그널 집합에 포함되어 있으면 1을, 포함되어 있지 않으면 0을 리턴

--- 

# sigaction() 함수

## sigaction 구조체
```
struct sigaction {
    void (*sa_handler)(int);
    void (*sa_sigaction)(int, siginfo_t *, void *);
    sigset_t sa_mask;
    int sa_flags;
    void (*sa_restorer)(void);
};
```
- 리눅스에서 sigaction 구조체의 멤버
    - 시그널 처리를 위한 시그널 핸들러 주소
    - 시그널 핸들러가 수행하는 동안 블로킹될 시그널
    - 추가 기능을 설정할 수 있는 플래그


### sa_handler와 sa_sigaction
```
struct sigaction {
int sa_flags;
union {
void (*sa_handler)();
void (*sa_sigaction)(int, siginfo_t *, void *);
} _funcptr;
sigset_t sa_mask;
};
```
- 만일 sa_flags에 SA_SIGINFO가 설정되어 있지 않으면 sa_handler에는 시그널을 처리할 동작을 지정
- sa_flags에 SA_SIGINFO가 설정되어 있으면 sa_sigaction 멤버를 사용

- sa_mask
    - sa_mask에는 시그널 핸들러가 동작 중일 때 **블로킹할 시그널을 시그널 집합**
    - 시그널 핸들러가 시작되어 시그널을 전달할 때 이미 블로킹된 시그널 집합에 sa_mask로 지정한 시그널 집합을 추가
    - sa_flags에 SA_NODEFER를 설정하지 않으면 시그널 핸들러를 호출하게 한 시그널도 블로킹

- sa_flags
    - sa_flags에는 시그널 전달 방법을 수정할 플래그를 지정
| 플래그          | 설명 |
|------------------|------|
| `SA_NOCLDSTOP`   | - `SIGCHLD` 시그널이 자식 프로세스가 중지(`STOP`) 또는 재시작(`CONT`)될 때 부모에게 전달되지 않도록 함 |
|                  | - 예: `kill -STOP pid` 또는 `kill -CONT pid`로 자식 프로세스를 멈추거나 재개해도 `SIGCHLD`를 보내지 않음 |
| `SA_NOCLDWAIT`   | - 자식 프로세스가 종료되어도 좀비(zombie) 상태로 남지 않도록 함 |
|                  | - 부모 프로세스가 `wait()`를 호출하지 않아도 자식의 자원이 자동으로 정리됨 |
|                  | - `SIGCHLD`와 함께 사용되어 자식 종료를 무시하고 자동 정리됨 |
| `SA_NODEFER`     | - 시그널 핸들러가 실행되는 동안 해당 **시그널을 블로킹하지 않도록 설정** |
|                  | - 기본 동작은 핸들러 실행 중 같은 시그널 발생 시 지연되지만, 이 플래그를 설정하면 재진입 가능 |
|                  | - 예: `SIGUSR1` 핸들러 실행 중 다시 `SIGUSR1` 발생 시 즉시 또 실행됨 |
| `SA_ONSTACK`     | - 시그널 핸들러를 실행할 때, 미리 설정한 대체 스택(`sigaltstack`)을 사용함 |
|                  | - 스택 오버플로와 같은 위기 상황에서 안전하게 별도 스택으로 핸들러 실행 가능 |
| `SA_RESETHAND`   | - 시그널 핸들러가 한 번 실행된 후 자동으로 기본 동작(`SIG_DFL`)으로 되돌아감 |
|                  | - 즉, 일회성 핸들러로 설정 가능 |
| `SA_RESTART`     | - 시그널 처리로 인해 중단된 시스템 호출을 자동으로 재시작함 |
|                  | - 예: `read()` 중 시그널이 들어오면 일반적으로 `EINTR` 에러가 발생하지만, 이 플래그 설정 시 자동으로 다시 `read()` 호출을 시도함 |
| `SA_SIGINFO`     | - 시그널 핸들러가 3개의 인자(① 시그널 번호, ② `siginfo_t *`: 시그널 원인 및 상세 정보, ③ `ucontext_t *`: 프로세스의 실행 상태)를 받을 수 있도록 설정됨 |
|                  | - 이 경우 `sa_sigaction` 필드를 사용해야 함 |


--- 

## sigaction()
```
#include <signal.h>                                                 [함수 원형]
int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact);
```
signum : 처리할 시그널
act : 시그널을 처리할 방법을 지정한 구조체 주소
oldact : 기존에 시그널을 처리하던 방법을 저장할 구조체 주소

- 시그널을 받아 이를 처리할 시그널 핸들러를 지정
- 플래그를 설정해 시그널을 처리하는 과정을 제어할 수도 있음
- 시그널 핸들러가 수행되는 동안 다른 시그널을 블로킹할 수도 있음
- signum에 지정한 시그널을 받았을 때 처리할 방법을 sigaction 구조체인 act로 받음

- 첫 번째 인자로 SIGKILL과 SIGSTOP 시그널을 제외한 어떤 시그널도 사용할 수 있음
- 두 번째와 세 번째 인자는 sigaction 구조체를 사용해 지정
- 두 번째 인자에는 NULL 또는 signum에 지정된 시그널을 받았을 때 처리할 방법을 지정한 구조체 주소를 저장
- 세 번째 인자에는 NULL 또는 기존 처리 방법을 저장
- sigaction() 함수는 수행에 성공하면 0을, 실패하면 –1을 리턴

```시그널 집합 처리 함수 예제
01 #include <unistd.h>
02 #include <signal.h>
03 #include <stdlib.h>
04 #include <stdio.h>
05
06 void sig_handler(int signo) {
07 psignal(signo, "Received Signal:");
08 sleep(5);
09 printf("In Signal Handler, After Sleep\n");
10 }
11
12 int main() {
13 struct sigaction act;
14
15 sigemptyset(&act.sa_mask);
16 sigaddset(&act.sa_mask, SIGQUIT);
17 act.sa_flags = 0;
---diff(SA_RESETHAND 플래그 설정)
17 act.sa_flags = SA_RESETHAND; // SA_RESETHAND 플래그가 설정되어
 SIGINT 시그널의 처리 방법이 기본 처리 방법으로 재설정(해당 예제에선 `^C`)
---
18 act.sa_handler = sig_handler;
19 if(sigaction(SIGINT, &act, (struct sigaction *)NULL) < 0) {
20 perror("sigaction");
21 exit(1);
22 }
23
24 fprintf(stderr, "Input SIGINT: ");
25 pause();
26 fprintf(stderr, "After Signal Handler\n");
27 }

>> Input SIGINT: ^CReceived Signal:: Interrupt
^\^\^\In Signal Handler, After Sleep
끝내기
>> Input SIGINT: ^CReceived Signal:: Interrupt
^C^C^C^C^CIn Signal Handler, After Sleep        // 기본 핸들러는 큐잉되지 않아 한번으로 인식
Received Signal:: Interrupt
In Signal Handler, After Sleep
After signal Handler

---diff(SA_RESETHAND 플래그 설정)
>>Input SIGINT: ^CReceived Signal:: Interrupt
^C^C^C^CIn Signal Handler, After Sleep

```

--- 

## 시그널 발생 원인 검색
```
void handler(int sig, siginfo_t *info, void *ucontext) { [함수 원형]
    …
}
```
sig : 시그널 핸들러를 호출할 시그널
info : 시그널이 발생한 원인을 담은 siginfo_t 구조체 포인터
ucontext : 시그널이 전달될 때 시그널을 받는 프로세스의 내부 상태를 나타내는 ucontext_t 구조체 포인터

```siginfo_t 구조체
typedef struct {
int si_signo;   // 관련된 시그널 번호
int si_errno;   // 0 또는 시그널과 관련된 오류 번호
int si_code;    // 시그널 발생 원인을 정의하는 코드
                //si_code의 값이 SI_NOINFO이면 si_signo만 의미가 있고 siginfo_t 구조체의 나머지 멤버는 사용되지 않음
union {
int si_trapno; 
pid_t si_pid;   // 시그널을 보낸 프로세스의 PID
uid_t si_uid;   // 시그널을 보낸 사용자의 UID
int si_status; 
clock_t si_utime; 
clock_t si_stime; 
sigval_t si_value; 
int si_int; 
void *si_ptr; 
int si_overrun; 
int si_timerid; 
void *si_addr; 
long si_band; 
int si_fd;
short si_addr_lsb;
void *si_lower; 
void *si_upper; 
int si_pkey; 
void *si_call_addr;
int si_syscall; 
unsigned int si_arch;
}
} siginfo_t;
```

--- 
## 사용자 프로세스의 시그널 생성

- si_code의 값이 0과 같거나 작다면 사용자 프로세스가 kill(), raise(), abort() 등의 함수로 시그널을 생성한 것
- 특정 시그널이 발생한 경우에 유효한 코드들 man sigaction으로 확인
| 코드          | 값        | 의미 |
|---------------|-----------|------|
| `SI_USER`     | 0         | `kill()` 또는 `raise()` 함수로 시그널을 보냄 |
| `SI_KERNEL`   | 0x80(128) | 커널이 시그널을 보냄 |
| `SI_QUEUE`    | -1        | `sigqueue()` 함수로 시그널을 보냄 |
| `SI_TIMER`    | -2        | `timer_settime()` 함수가 생성한 타이머가 만료되어 시그널을 보냄 |
| `SI_MESGQ`    | -3        | POSIX 메시지 큐의 상태가 변해서 시그널을 보냄 |
| `SI_ASYNCIO`  | -4        | 비동기 입출력이 완료되어 시그널을 보냄 |
| `SI_SIGIO`    | -5        | `SIGIO` 시그널이 큐에 들어와서 시그널을 보냄 |


--- 

## 시그널 발생 원인 출력 함수 : psiginfo(3)
```
#include <siginfo.h> [함수 원형]
void psiginfo(const siginfo_t *pinfo, const char *s);
```
pinfo : 시그널 발생 원인에 관한 정보를 저장하고 있는 구조체 포인터
s : 출력할 문자열

- siginfo_t 구조체 포인터를 인자로 받아 시그널이 발생한 원인을 표준 오류로 출력
- 첫 번째 인자인 pinfo에는 시그널 핸들러의 두 번째 인자로 받은 siginfo_t 구조체의 주소를 지정
- 함수를 실행하면 두 번째 인자인 s에 지정한 문자열이 먼저 출력 되고 시그널 정보가 출력

--- 

```시그널 발생 원인 검색하기(SA_SIGINFO 플래그 설정)
01 #include <sys/ucontext.h>
02 #include <unistd.h>
03 #include <signal.h>
04 #include <stdlib.h>
05 #include <stdio.h>
06
07 void sig_handler(int signo, siginfo_t *sf, ucontext_t *uc) {
08 psiginfo(sf, "Received Signal:");
09 printf("si_code : %d\n", sf->si_code);
10 }
11
12 int main() {
13 struct sigaction act;
14
15 act.sa_flags = SA_SIGINFO;   // 반드시 설정(**SA_SIGINFO**)
16 act.sa_sigaction = (void (*)(int, siginfo_t *, void *))sig_handler;
17 sigemptyset(&act.sa_mask);
18 if (sigaction(SIGUSR1, &act, (struct sigaction *)NULL) < 0) {
19 perror("sigaction");
20 exit(1);
21 }
22 pause();
23 }
```
--- 


# 알람 시그널 (VS 스레드 생성으로 멀티 작업환경 구축, ex.주기적인 백업작업)

## 알람 시그널 생성 : alarm(2)
```
#include <unistd.h> [함수 원형]
unsigned int alarm(unsigned int seconds);
```
seconds : 알람을 발생시킬 때까지 남은 시간(초 단위)

- 인자로 초 단위 시간을 받음
- 인자로 지정한 시간이 지나면 SIGALRM 시그널이 생성되어 프로세스에 전달
- **프로세스별로 알람시계가 하나밖에 없으므로 알람은 하나만 설정할 수 있음**
- 따라서 알람 시그널을 생성하기 전에 다시 alarm() 함수를 호출하면 이전 설정은 없어지고 재설정
- **인자로 0을 지정하면 이전에 설정한 알람 요청은 모두 취소**
- alarm() 함수는 이전에 호출한 alarm() 함수의 시간이 남아 있으면 해당 시간을, 그렇지 않으면 0을 리턴

```
01 #include <unistd.h>
02 #include <signal.h>
03 #include <stdio.h>
04
05 void sig_handler(int signo) {
06 psignal(signo, "Received Signal");
07 }
08
09 int main() {
10 signal(SIGALRM, sig_handler);
11
12 alarm(2);
13 printf("Wait...\n");
14 sleep(3);
15 }
```
--- 

## 인터벌 타이머
- 타이머의 종류
    - 리눅스 시스템은 프로세스별로 타이머 3개를 제공
    - 타이머에 관한 정보는 sys/time.h 파일에 정의되어 있음
    - 각 타이머가 사용하는 시간 유형에 따라 각기 다른 시그널이 생성

- ITIMER_REAL 
    - 실제 시간을 사용, 이 타이머가 만료되면 SIGALRM 시그널이 생성

- ITIMER_VIRTUAL
    - 프로세스가 사용하는 사용자 모드 CPU 시간을 사용
    - 이 시간은 프로세스가 동작 중일 때만 작동하며, 만료되면 SIGVTALRM 시그널이 생성

- ITIMER_PROF
    - 프로세스가 사용하는 시스템 모드와 사용자 모드 CPU 시간을 합해 사용
    - 이 타이머가 만료되면 SIGPROF 시그널이 생성
    - ITIMER_VIRTUAL과 함께 사용하면 프로세스 사용한 사용자 모드 CPU 시간과 시스템 모드 CPU 시간을 알 수 있음(ITIMER_PROF-INIMER_VIRTUAL)

--- 

## 타이머 정보 검색 : getitimer(2)
```
#include <sys/time.h>                   [함수 원형]
int getitimer(int which, struct itimerval *curr_value);
```
which : 검색할 타이머의 종류
curr_value : 타이머 정보를 저장할 구조체 포인터

- 타이머 정보를 검색하는 함수로, which에는 검색할 타이머의 종류를 지정
- curr_value에는 타이머의 현재 시간과 타이머 간격 정보를 저장할 itimerval 구조체 포인터를 지정

```itimerval 구조체
#include <sys/time.h>

struct itimerval {
struct timeval it_interval; // 타이머의 간격 정보
struct timeval it_value;    // 타이머 만료까지 남은시간(최초의 타이머시간)
};
```
- it_value의 값이 0이면 타이머 기능이 정지
- it_interval의 값이 0이면 다음에 타이머가 만료될 때 타이머 기능이 정지
- 이 시간 정보들은 timeval 구조체에 정의

```timeval 구조체
struct timeval {
time_t tv_sec;
suseconds_t tv_usec;
};
```
- timeval 구조체에는 초와 마이크로초 단위로 시간을 저장

// 실제로는 10000마이크로초(μsec)정도 오차 발생 = 100틱(Hz)는 10ms의 오차 허용. 즉, 비교적 정확히 동작한다고 볼수 있음.

--- 

## 타이머 설정 : setitimer(2)
```
#include <sys/time.h>                                                   [함수 원형]
int setitimer(int which, const struct itimerval *value, struct itimerval *ovalue);
```
which : 설정할 타이머의 종류
value : 설정할 타이머의 정보를 저장한 구조체 포인터
ovalue : 이전 타이머의 정보를 저장할 구조체 포인터

- 타이머를 설정하는 함수
- which에는 설정할 타이머의 종류를 지정하고 value에는 설정할 타이머 정보를 저장해 인터벌 타이머를 설정
- **ovalue는 NULL 또는 이전 설정값을 저장**
- value와 ovalue는 itimerval 구조체를 가리키는 포인터

--- 

## 시그널 정보 출력 : psignal(3)
```
#include <signal.h> [함수 원형]
void psignal(int sig, const char *s);
```

## 시그널 정보 출력 : strsignal(3)
```
#include <string.h> [함수 원형]
char *strsignal(int sig);
```
- 인자로 받은 시그널이 없으면 NULL을 리턴

--- 

## 시그널 블로킹과 해제 : sighold(3), sigrelse(3) [사용 권장 X]
```
#include <signal.h> [함수 원형]
int sighold(int sig);
int sigrelse(int sig);
```

- 인자로 받은 시그널을 프로세스의 시그널 마스크에 추가
- 시그널 마스크에 추가된 시그널은 블로킹되어 해당 시그널을 받지 않음
- sigrelse() 함수는 프로세스의 시그널 마스크에서 시그널을 해제
- 이 함수들은 시스템 V 유닉스에서 유래된 것으로, 
- **리눅스에서는 이 함수 대신 POSIX 표준인 `sigaction()`, `sigprocmask()` 함수를 사용할 것을 추천**

--- 

## 시그널 집합 블로킹과 해제 : sigprocmask(2)
```
#include <signal.h> [함수 원형]
int sigprocmask(int how, const sigset_t *t, sigset_t *oldset);
```
how : 시그널을 블로킹할 것인지 해제할 것인지 여부
set : 블로킹하거나 해제할 시그널 집합의 주소
oldset : NULL 또는 이전 설정값을 저장할 시그널 집합의 주소

- POSIX 표준 함수이며 sighold(), sigrelse() 함수와 기능이 유사
- 시그널 집합을 사용해 한 번에 여러 시그널을 블로킹할 수 있음
- set에 지정한 시그널 집합을 블로킹할 것인지 해제할 것인지를 how 에 지정해 호출

- 첫 번째 인자인 how에 올 수 있는 값
    - **SIG_BLOCK** : set에 지정한 시그널 집합을 시그널 마스크에 추가
    - **SIG_UNBLOCK** : set에 지정한 시그널 집합을 시그널 마스크에서 제거
    - **SIG_SETMASK** : set에 지정한 시그널 집합으로 현재 시그널 마스크를 대체
- 두 번째 인자인 set은 블로킹하거나 해제할 시그널 집합을 가리킴
- 세 번째 인자인 oldset 에는 NULL이 아니면 이전 설정값이 저장

--- 

## 시그널 대기 : pause(2)
```
#include <unistd.h> [함수 원형]
int pause(void);
```

- pause() 함수는 시그널 잡기 함수로, 시그널을 잡았을 때만 –1을 리턴

--- 

## 시그널 대기 : sigpause(3) [사용 권장 X]
```
#include <signal.h> [함수 원형]
int sigpause(int sigmask); /* BSD */
int sigpause(int sig); /* System V */
```
sigmask : 블록을 해제하고 대기할 시그널을 지정한 시그널 마스크
sig : 시그널이 올 때까지 대기할 시그널

- 시스템 V와 BSD 유닉스에서 함수 형식이 다르므로 주의
- 리눅스에서는 스팍 아키텍처에서만 지원하며, 이 함수 대신 sigsuspend() 함수를 사용할 것을 권고

--- 

## 시그널 기다리기 : sigsuspend(2)
```
#include <signal.h> [함수 원형]
int sigsuspend(const sigset_t *mask);
```
mask : 기다리려는 시그널을 지정한 시그널 집합의 주소

- 인자로 지정한 시그널 집합에 설정된 시그널들로 프로세스의 시그널 마스크를 교체
- 블로킹되지 않은 시그널이 도착할 때까지 프로세스의 수행을 멈추고 기다림
- 시그널이 도착하면 프로세스의 시그널 마스크는 이전 설정으로 되돌아감

--- 

## 시그널 보내기 : sigsend(2)
```
#include <signal.h> [함수 원형]
int sigsend(idtype_t idtype, id_t id, int sig);
```
idtype : id에 지정한 값의 종류
id : 시그널을 받을 프로세스나 프로세스 그룹
sig : 보내려는 시그널

- sig로 지정한 시그널을 id에 지정한 프로세스나 프로세스 그룹에 보냄
- idtype은 id에 지정한 값의 의미를 알려줌
- 특정 프로세스뿐만 아니라 프로세스 그룹 등 시그널을 받을 대상을 다양하게 지정할 수 있다는 점이 kill() 함수와 다름

### sigsend()함수의 인자

| 값         | 의미 |
|------------|------|
| `P_PID`     | PID가 `id`인 프로세스에 시그널을 보낸다. |
| `P_PGID`    | 프로세스 그룹 ID가 `id`인 모든 프로세스에 시그널을 보낸다. |
| `P_SID`     | 세션 ID가 `id`인 모든 프로세스에 시그널을 보낸다. |
| `P_UID`     | 유효 사용자 ID(`euid`)가 `id`인 모든 프로세스에 시그널을 보낸다. |
| `P_GID`     | 유효 그룹 ID(`egid`)가 `id`인 모든 프로세스에 시그널을 보낸다. |
| `P_ALL`     | `id` 값을 무시하고 시스템의 모든 프로세스에 시그널을 보낸다. |
| `P_MYID`    | 함수를 호출한 **자기 자신**에게 시그널을 보낸다. |


--- 

## 시그널 무시 처리: sigignore(3)
```
#include <signal.h> [함수 원형]
int sigignore(int sig)
```
sig : 무시할 시그널

- 인자로 지정한 시그널의 처리 방법을 SIG_IGN으로 설정함으로써 시그널을 무시하도록 함
