# 파이프

- 두 프로세스 사이에서 한 방향으로 통신할 수 있도록 지원하는 것
    - 한방향은 One-way 즉, 단방향 통신이 가능함을 의미
- 셸에서 `|` 기호가 파이프를 의미
- 셸에서 파이프 기능은 한 명령의 표준 출력을 다음 명령에서 표준 입력으로 받아 수행하는 것을 의미
    `$ cat test.c | more`
- 파이프는 이름 없는 파이프(익명 파이프)와 이름 있는 파이프로 구분

--- 

## 이름 없는 파이프: pipe
- 특별한 수식어 없이 그냥 파이프라고 하면 일반적으로 이름 없는 파이프(익명 파이프)를 의미
- 이름 없는 파이프는 부모-자식 프로세스 간에 통신을 지원
- 부모 프로세스에서 fork() 함수를 통해 자식 프로세스를 생성하고, 부모 프로세스와 자식 프로세스 간에 통신하는 것
    - 따라서 ‘부모 프로세스 → 자식 프로세스’ 또는 ‘자식 프로세스 → 부모 프로세스’ 중 한 방향을 선택
- 파이프를 이용해 양방향 통신을 원할 경우 파이프를 2개 생성해야 함

--- 

### 파이프 만들기 : popen(3)
```
#include <stdio.h>                  [함수 원형]
FILE *popen(const char *command, const char *type);
```
command : 셸 명령(ex. `ls -al`)
type : “r” 또는 “w”

- 내부적으로 `fork() 함수`를 실행해 자식 프로세스를 만들고, command에서 지정한 명령을 exec() 함수로 실행해 자식 프로세스가 수행하도록 함
- `popen() 함수`는 자식 프로세스와 파이프를 만들고 mode의 값에 따라 표준 입출력을 연결
- 리턴값은 파일 포인터로, 파일 입출력 함수에서 이 파일 포인터를 사용하면 파이프를 읽거나 쓸 수 있음
- `popen() 함수`는 파이프 생성에 실패하면 `널 포인터`를 리턴

--- 

### 파이프 닫기 : pclose
```
#include <stdio.h> [함수 원형]
int pclose(FILE *stream);
```

- 관련된 `waitpid() 함수`를 수행하며 자식 프로세스들이 종료하기를 기다렸다가 리턴
- `pclose() 함수`의 리턴 값은 자식 프로세스의 종료 상태
- 이 함수는 파이프를 닫는 데 실패하면 –1을 리턴

--- 

```popen() 함수로 쓰기 전용 파이프 생성
01 #include <stdlib.h>
02 #include <stdio.h>
03
04 int main( ) {
05  FILE *fp;
06  int a;
07
08  fp = popen("wc -l", "w");
09  if (fp == NULL) {
10      fprintf(stderr, "popen failed\n");
11      exit(1);
12  }
13
14  for (a = 0; a < 100; a++)
15      fprintf(fp, "test line\n"); // 자식프로세스에 출력하는 것(부모에서 출력X)
16
17  pclose(fp);
18 }

> 100
```
```popen() 함수로 읽기 전용 파이프 생성
01 #include <stdlib.h>
02 #include <stdio.h>
03
04 int main( ) {
05  FILE *fp;
06  char buf[256];
07
08  fp = popen("date", "r");
09  if (fp == NULL) {
10      fprintf(stderr, "popen failed\n");
11      exit(1);
12  }
13
14  if (fgets(buf, sizeof(buf), fp) == NULL) {
15      fprintf(stderr, "No data from pipe!\n");
16      exit(1);
17  }
18
19  printf("line : %s\n", buf);
20  pclose(fp);
21 }

>line : 2025. 06. 13 (목) 14:31:53 KST
>
```
--- 

### 파이프 만들기 : pipe(2)
```
#include <unistd.h> [함수 원형]
int pipe(int pipefd[2]);
```
pipefd[2] : 파이프로 사용할 파일 기술자(2개) 

- pipe() 함수는 인자로 크기가 2인 정수형 배열을 받음
- 이 배열에 파일 기술자 2개를 저장
- **pipefd[0]은 읽기 전용**으로 열고 **pipefd[1]은 쓰기 전용**으로 실행
- pipe() 함수는 파이프를 생성하는 데 성공하면 0을, 실패하면 –1을 리턴

```디스크립터
0 = 표준 입력
1 = 표준 출력
2 = 표준 에러
3 = pipefd[0] 읽기전용
4 = pipefd[1] 쓰기전용
```
--- 

#### pipe() 함수로 통신하는 과정
1. pipe() 함수를 호출해 파이프에 사용할 파일 기술자를 얻음
    - 파이프도 파일의 일종이므로 파일(파이프)을 읽고 쓸 수 있는 파일 기술자가 필요한데, 이를 pipe() 함수가 생성
2. fork() 함수를 수행해 자식 프로세스를 생성
    - 이때 pipe() 함수에서 생성한 파일 기술자도 자식 프로세스로 복사
    - 같은 파일 기술자를 부모 프로세스와 자식 프로세스가 모두 가지고 있음
3. 파이프는 **단방향 통신**이므로 통신 방향을 결정
    - 부모 프로세스에서 자식 프로세스로 통신할 수 있도록 파일 기술자들이 정리
    - 부모 프로세스가 fd[1]에 쓴 내용을 자식 프로세스가 fd[0]에서 읽음
    - 만약 파이프의 쓰기 부분이 닫혀 있다면 파이프에서 읽으려고 할 때 0이나 EOF가 리턴 // 자식 프로세스
    - 파이프의 읽기 부분이 닫혀 있다면(부모fd[0]닫음) 파이프에 쓰려고 할 때 `SIGPIPE 시그널`이 발생 // 자식 프로세스

```자식의 통신
01 #include <sys/wait.h>
02 #include <unistd.h>
03 #include <stdlib.h>
04 #include <stdio.h>
05
06 int main( ) {
07  int fd[2];
08  pid_t pid;
09  char buf[256];
10  int len, status;
11
12  if (pipe(fd) == -1) {
13      perror("pipe");
14      exit(1);
15  }
16
17  switch (pid = fork( )) {
18      case -1 :
19          perror("fork");
20          exit(1);
21           break;
22      case 0 : /* child */
23          close(fd[1]);
24          write(1, "Child Process: ", 15);
25          len = read(fd[0], buf, 256);
26          write(1, buf, len); // 1: 표준출력(모니터)에 출력
27          close(fd[0]);
28          break;
29      default :
30          close(fd[0]);
31          write(fd[1], "Test Message\n", 14); // write(4, "Test Message\n", 14);도 상관X
32          close(fd[1]);
33          waitpid(pid, &status, 0); // 자식 기다림
34          break;
35  }
36 }
> Child Process: Test Message
```
```pipe 명령어 구현
01 #include <sys/wait.h>
02 #include <unistd.h>
03 #include <stdlib.h>
04 #include <stdio.h>
05
06 int main( ) {
07  int fd[2];
08  pid_t pid;
09
10  if (pipe(fd) == -1) {
11      perror("pipe");
12      exit(1);
13  }
14
15  switch (pid = fork( )) {
16      case -1 :
17          perror("fork");
18          exit(1);
19          break;
20      case 0 : /* child */
21          close(fd[1]);
22          if (fd[0] != 0) {
23              dup2(fd[0], 0); // 표준 입력대신 fd[0] 사용
24              close(fd[0]);
25          }
26          execlp("grep", "grep", "ssh", (char *)NULL); //쓰기전용(ps -ef)에서 grep ssh을 읽고 0번(키보드, 표준 입력)으로 실행 
27          exit(1);
28          break;
29      default :
30          close(fd[0]);
31          if (fd[1] != 1) {
32              dup2(fd[1], 1); // 표준 출력대신 fd[1] 사용 // 표준출력(모니터)에 결과 출력
33              close(fd[1]);
34          }
35          execlp("ps", "ps", "-ef", (char *)NULL);
36          wait(NULL);
37          break;
38  }
39 }
> $ `ps -ef | grep ssh`의결과 출력
```
```양방향 통신
01 #include <sys/wait.h>
02 #include <unistd.h>
03 #include <stdlib.h>
04 #include <stdio.h>
05 #include <string.h>
06
07 int main( ) {
08  int fd1[2], fd2[2];
09  pid_t pid;
10  char buf[257];
11  int len, status;
12
13  if (pipe(fd1) == -1) { // 부모->자식
14      perror("pipe");
15      exit(1);
16  } // fd1[0]=3, fd1[1]=4
17
18  if (pipe(fd2) == -1) { // 자식->부모
19      perror("pipe");
20      exit(1);
21  } // fd2[0]=5, fd2[1]=6
22
23  switch (pid = fork( )) {
24      case -1 :
25          perror("fork");
26          exit(1);
27          break;
28      case 0 : /* child */
29          close(fd1[1]);
30          close(fd2[0]);
31          len = read(fd1[0], buf, 256);
32          write(1, "Child Process:", 15);
33          write(1, buf, len);
34
35          strcpy(buf, "Good\n");
36          write(fd2[1], buf, strlen(buf));
37          break;
38      default :
39          close(fd1[0]);
40          close(fd2[1]);
41          write(fd1[1], "Hello\n", 6);
42
43          len = read(fd2[0], buf, 256);
44          write(1, "Parent Process:", 15);
45          write(1, buf, len);
46          waitpid(pid, &status, 0);
47          break;
48  }
49 }
```
>Child Process:Hello
>Parent Process:Good
--- 


## 이름 있는 파이프: FIFO
- 부모-자식 프로세스 관계가 아닌 **독립적인 프로세스들**이 파이프를 이용하려면 파일처럼 이름이 있어야 함
- 이름 있는 파이프는 특수 파일의 한 종류로, FIFO라고도 함
- 모든 프로세스가 이름 있는 파이프를 이용해 통신할 수 있음

--- 

### FIFO 특수 파일 생성 : mknod 명령
`mknod 파일명 p` 

- FIFO 파일뿐만 아니라 특수 파일도 생성하는 명령
- -m 옵션은 새로 생성되는 FIFO 파일의 접근 권한을 지정
- 이 옵션을 생략하면 umask 값에 따라 기본 권한을 설정

ex. mkfifo 명령으로 BIT_FIFO라는 FIFO 파일을 생성할 경우
`~$ mkfifo -m 0664 BIT_FIFO`

--- 

### 특수 파일 생성 : mknod()
```
#include <sys/types.h> [함수 원형]
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
int mknod(const char *pathname, mode_t mode, dev_t dev);
```
pathname : 특수 파일을 생성할 경로
mode : 특수 파일의 종류와 접근 권한 지정
dev : 블록/문자 장치 설정값

- 첫 번째 인자인 pathname으로 지정한 경로에 특수 파일을 생성
- 두 번째 인자인 mode에는 특수 파일의 종류와 접근 권한을 지정

- mode에 지정하는 특수 파일의 종류는 다음 중 하나
- **S_IFIFO : FIFO 특수 파일**
- S_IFCHR : 문자 장치 특수 파일
- S_IFBLK : 블록 장치 특수 파일
- S_IFREG : 일반 파일
- S_IFSOCK : 유닉스 도메인 소켓 파일(컴퓨터 내의 소켓만 지원, 다른 컴퓨터 통신 불가)

- 세번째 인자인 dev는 생성하려는 특수 파일이 블록 장치 특수 파일이나 문자 장치 특수 파일일 때만 의미가 있음
    - 장치번호: Major(메이저, 장치의 타입번호가 같다) 하고 Minor(마이너)번호가 있다

- mknod() 함수는 수행에 성공하면 0을, 실패하면 –1을 리턴

--- 

### FIFO 파일 생성 : mkfifo(3)
```
#include <sys/types.h> [함수 원형]
#include <sys/stat.h>
int mkfifo(const char *pathname, mode_t mode);
```
pathname : FIFO 파일을 생성할 경로
mode : 접근 권한 지정
mkfifo( ) 함수의 특징

- mkfifo() 함수는 pathname으로 지정한 경로에 접근 권한을 지정해 FIFO 파일을 생성

---

```FIFO 파일 생성예제
01 #include <sys/types.h>
02 #include <sys/stat.h>
03 #include <stdlib.h>
04 #include <stdio.h>
05
06 int main( ) {
07  if (mknod("HAN-FIFO", S_IFIFO | 0644, 0) == -1) {
08      perror("mknod");
09      exit(1);
10  } // HAN-FIFO파일 생성(범용성 있는 방법)
11
12  if (mkfifo("BIT-FIFO", 0644) == -1) {
13      perror("mkfifo");
14      exit(1);
15  } // BIT-FIFO 파일생성 (이름있는 파이프만 사용하는 방법)
16 }
```