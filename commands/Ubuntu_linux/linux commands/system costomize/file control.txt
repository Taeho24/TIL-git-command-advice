# 리눅스의 함수


파일명으로 파일 정보 검색 stat(2):시스템콜
```
#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>

int stat(const char *pathname, struct stat *statbuf);
```
pathname: 정보를 알고자 하는 파일명
statbuf: 검색한 파일 정보를 저장할 구조체 주소

*stat()함수로 파일 정보를 검색할때: 읽기/쓰기/실행 권한이 있어하지는 않음.
단. 파일에 이르는 경롱의 각 디렉터리에 대한 읽기 권한은 있어야 함.

---


파일 기술자로 파일 정보 검색 stat(2):시스템콜
```
#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>

int fstat(int fd, struct stat *statbuf);
```
fd: 열려 있는 파일의 파일 기술자
statbuf: 검색한 파일 정보를 저장할 구조체 주소

fstat() 함수의 특징
- 파일 경로 대신 현재 열려 있는 파일의 파일 기술자를 인자로 받아 파일 정보를 검색한 후 statbuf로 지정한 구조체에 저장


예제코드
```
01 #include <sys/types.h>
02 #include <sys/stat.h>
03 #include <fcntl.h>
04 #include <unistd.h>
05 #include <stdlib.h>
06 #include <stdio.h>
07
08 int main() {
09 int fd;
10 struct stat statbuf;
11
12 fd = open("linux.txt", O_RDONLY); // O_RDONLY는 지정 상수
13 if (fd == -1) {
14 perror("open: linux.txt");
15 exit(1);
16 }
17
18 fstat(fd, &statbuf);
19
20 printf("Inode = %d\n", (int)statbuf.st_ino);
21 printf("UID = %d\n", (int)statbuf.st_uid);
22 close(fd);
23 }
```

---

## stat 구조체
```
struct stat {
dev_t            st_dev; // 파일이 저장되어 있는 장치의 번호를 저장
ino_t            st_ino; // 파일의 inode 번호를 저장
mode_t           st_mode; // 파일의 종류와 접근 권한을 저장 // 16byte정도 저장
nlink_t          st_nlink; // 하드 링크의 개수를 저장
uid_t            st_uid; // 파일 소유자의 UID를 저장
gid_t            st_gid; // 파일 소유 그룹의 GID를 저장
dev_t            st_rdev; // 장치 파일이면 주 장치 번호와 부 장치 번호를 저장
                             장치 파일이 아니면 아무 의미가 없음
off_t            st_size;
blksize_t        st_blksize; // 파일 내용을 입출력할 때 사용하는 버퍼의 크기를 저장
blkcnt_t         st_blocks; // 파일에 할당된 파일 시스템의 블록 수로, 블록의 크기는 512바이트
struct timespec  st_atim;
struct timespec  st_mtim;
struct timespec  st_ctim;

#define st_atime st_atim.tv_sec
#define st_mtime st_mtim.tv_sec
#define st_ctime st_ctim.tv_sec
};
```

_t: inter type(숫자 ex.0777)

---

### mtime (Modification Time)
- 의미: 파일 내용(데이터)이 마지막으로 수정된 시간
ex. 텍스트 파일에 내용을 추가하거나 변경했을 때

### ctime (Change Time)
- 의미: 파일의 메타데이터(속성)가 마지막으로 변경된 시간
ex. 권한 변경, 소유자 변경, 링크 수 변경, 이름 변경, mtime 변경

### atime (Access Time)
- 의미: 파일에 읽기 접근(read)이 마지막으로 발생한 시간
ex. cat, less, head 등으로 파일을 열어보았을 때



timespec: 초와 나노초를 저장하기 위한 구조체, 리눅스 커널 2.6부터 나노초 수준의 정밀도를 지원
```
struct timespec {
__kernel_time_t tv_sec; /* 초 (seconds) */
long tv_nsec;           /* 나노초(nanoseconds) */
}
```

- st_atime : 마지막으로 파일을 읽거나 실행한 시각을 timespec 구조체로 저장
- st_mtime : 마지막으로 파일의 내용을 변경(쓰기)한 시각을 저장
- st_ctime : 마지막으로 inode의 내용을 변경한 시각을 저장
```
#define st_atime st_atim.tv_sec
#define st_mtime st_mtim.tv_sec
#define st_ctime st_ctim.tv_sec
```

---

## 특수 접근 권한

- SetUID(Set User ID)
    - 기호: s (사용자 실행 권한 위치)
    - 의미: 해당 파일을 실행할 때 파일 소유자의 권한으로 실행됨
    - 용도: 일반 사용자가 루트 권한이 필요한 프로그램을 제한적으로 사용할 수 있도록 허용
    - 예: /usr/bin/passwd — 사용자가 자신의 비밀번호를 바꾸기 위해 "root 권한"이 필요함

- SetGID (Set Group ID)
    - 기호: s (그룹 실행 권한 위치)
    - 의미
    1. (파일에 적용): 파일을 실행하면 파일 소유 그룹의 권한으로 실행됨
    2. (디렉토리에 적용): 해당 디렉토리에 생성되는 파일/디렉토리는 부모 디렉토리의 그룹 소유를 상속
    - 용도: 협업 디렉토리에서 생성되는 모든 파일의 그룹을 동일하게 유지
    - 예: 개발 팀 작업 디렉토리에서 그룹 권한 자동 일치

- Sticky Bit
    - 기호: t (기타 실행 권한 위치)
    - 의미: 디렉토리에 설정되며, 사용자는 자신이 만든 파일만 삭제 가능
    - 용도: 공용 디렉토리에서 다른 사용자의 파일을 삭제하지 못하도록 보호
    - 예: /tmp 디렉토리 drwxrwxrwt


st_mode(16비트)
파일종류(4비트) 특수 접근 권한(3비트) 소유자 접근 권한(3비트) 그룹 접근 권한(3비트) 기타 사용자 접근권한(3비트)
-,d,b,c,l       s s t                 r w x                   r w x                     r w x
                │ │ └Sticky bit
                │ └Setgid
                └Setuid

---

## 링크함수 : 하드링크 & 심벌릭 링크
