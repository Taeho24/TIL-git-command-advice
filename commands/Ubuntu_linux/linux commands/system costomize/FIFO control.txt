# 리눅스의 파일 입출력

- 일반파일: 텍스트나 바이너리 형태의 자료를 저장하는 파일
- 특수파일: 데이터 전송 또는 장치 접근에 사용하는 파일

- 파일 읽고 쓰는 방법
1. 저수준 파일 입출력
    - 리눅스 커널의 시스템 호출을 이용해 파일 입출력을 수행
    - 시스템 호출을 이용하므로 파일에 좀 더 빠르게 접근할 수 있는 장점
    - 또한 바이트 단위로 파일의 내용을 다루므로 일반 파일뿐만 아니라 특수 파일도 읽고 쓸 수 있음
    - "바이트 단위로만 입출력을 수행 가능" 하므로 응용프로그램 작성시 다른 추가기능을 함수로 추가 구현 해야함
    - 열린 파일을 참조할 때 "파일 기술자(File Descriptor)" 사용
 
    파일 지시자: int fd
    특징:
        - 훨씬 빠름
        - 바이트 단위로 읽고 쓰기를
        - 특수 파일에 대한 접근 기능
        주요 함수:
        ```
        open(), close(), read(), write(), dup(), dup2(), fcntl(), lseek(), fsync()
        ```

2. 고수준 파일 입출력
    - C 언어의 표준 함수로 제공
    - 데이터를 바이트 단위로 한정하지 않고 "버퍼"를 이용해 한꺼번에 읽기와 쓰기를 수행
    - 다양한 입출력 데이터 변환 기능도 이미 구현되어 있어 자료형에 따라 편리하게 이용할 수 있음
    - 열린 파일을 참조할 때 "파일 포인터(File Pointer)"사용

    파일 지시자: FILE *fp;
    특징:
        - 사용하기 쉬움
        - 버퍼 단위로 읽고 쓰기
        - 데이터의 입출력 동기화가 쉬움
        - 여러가지 형식을 지원
        주요 함수:
        ```
        fopen(), fclose(), fread(), fwrite(), fputs(), fgets(), fprintf(), fscanf(), freopen(), fseek()
        ```

--- 

# 저수준 파일 입출력

## 파일 기술자(FILE Descriptor)

- 현재 열려 있는 파일을 구분할 목적으로 시스템에서 붙여놓은 번호
- 파일 기술자는 정숫값으로, open() 함수를 사용해 파일을 열 때 부여
- "프로세스"가 파일을 열 때 파일 기술자에는 0번부터 순서대로 가장 작은 번호가 자동 할당
    - 사용하지 않는 값 중 가장 작은 값부터 할당
- 0번부터 시작하여 0번, 1번, 2번 파일 기술자에는 기본적인 용도가 지정되어 있음
    - 0번: 표준 입력(stdin)
    - 1번: 표준 출력(stdout)
    - 2번: 표준 오류 출력(stderr)

## 파일 열기: open(2)
```
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

int open(const char *pathname, int flags);
int open(const char *pathname, int flags, mode_t mode); // create
```
pathname : 열려는 파일이 있는 경로
flags : 파일 상태 플래그
mode : 접근 권한

- pathname에 지정한 파일을 lags에 지정한 상태 플래그의 값에 따라 열고 파일 기술자를 반환
- 파일의 상태를 조정 하는 flags 값은 man 명령으로 확인할 수 있음

- flags
    종류        기능
    O_RDONLY    파일을 읽기 전용으로 연다.
    O_WRONLY    파일을 쓰기 전용으로 연다.
    O_RDWR      파일을 읽기/쓰기 전용으로 연다.

    O_CREAT     파일 생성
    O_EXCL      파일이 없다면 생성, 있다면 오류 메시지

    O_APPEND    파일의 맨 끝에 내용을 추가 // O_WRONLY나O_RDWR과 같이 쓰임
    O_TRUNC     파일을 생성할 때 이미 있는 파일이고 쓰기 옵션으로 열었다면 내용을 모두 지우고 파일 길이를 0으로 변경
    ...

- 플래그 지정
    - 쓰기 전용으로 열 때(이미 파일이 있는 경우)
        `O_WRONLY | O_TRUNC`
    - 쓰기 전용으로 열 때(파일이 없는 경우)
        `O_WRONLY | O_CREAT | O_TRUNC`
    - 읽기/쓰기/추가용으로 열 때
        `O_RDWR | O_APPEND`
    - 상수를 이용해 0644 권한을 지정
        `mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH;`


## 파일 생성: creat(2)
```
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

int creat(const char *pathname, mode_t mode);
```
pathname : 파일을 생성할 경로
mode : 접근 권한

- 다음의 creat() 함수와 open() 함수는 같은 의미로 동작
```
creat(pathname, mode);              // creat();추천X
open(pathname, O_CREAT | O_WRONLY | O_TRUNC, mode);
```

## 파일 닫기: close(2)
```
#include <unistd.h>
int close(int fd);
```
fd : 파일 기술자

--- 

## 한 프로세스가 열 수 있는 파일의 최대 개수는?
~$ ulimit -n // 1024
// $ ulimit --help // 시스템 설정에 따라 달라짐


Soft Limit (소프트 한계)
- 프로세스가 기본적으로 사용하는 자원 제한값
- 사용자나 프로세스가 자유롭게 낮추거나 원래 수준까지 되돌릴 수 있음
- 보통 ulimit 명령어로 확인/변경 가능
- 특징
    - 유연하게 조정 가능
    - Hard limit 이하로만 설정 가능
    - 예: 파일 개수, 프로세스 수, 스택 크기, 메모리 등


Hard Limit (하드 한계)
- 특정 자원에 대해 시스템이 허용하는 최대 한계값
- 일반 사용자는 하드 리밋을 초과할 수 없음
- 소프트 리밋은 이 값 이하로만 조정 가능
- 시스템 관리자(root)만 변경 가능
- 특징
    - 보안 목적: 특정 사용자가 시스템 자원을 과도하게 사용하는 것을 방지
    - 영구적인 리밋 기준으로 사용

--- 

## 파일 읽기: read(2)
```
#include <unistd.h>
ssize_t read(int fd, void *buf, size_t count);
```
fd : 파일 기술자
buf : 파일에 기록할 데이터를 저장한 메모리 영역
count : buf의 크기(기록할 데이터의 크기)

- 실제로 읽은 바이트 수를 리턴하며, 오류가 발생하면 -1을 리턴
- 만일 리턴값이 0이면 파일의 끝에 도달해 더 이상 읽을 내용이 없음을 의미
- 파일에 저장된 데이터가 텍스트든 이미지든 상관없이 무조건 바이트 단위로 읽음


## 파일 쓰기: write(2)
```
#include <unistd.h>
ssize_t write(int fd, const void *buf, size_t count);
```
fd : 파일 기술자
buf : 파일에 기록할 데이터를 저장한 메모리 영역
count : buf의 크기(기록할 데이터의 크기)

- read() 함수와 인자의 구조는 같지만 의미가 다름
- 파일 기술자는 쓰기를 수행할 파일을 가리키고, buf는 파일에 기록할 데이터를 저장하고 있는 메모리 영역을 가리킴
- buf가 가리키는 메모리 영역에서 count로 지정한 크기만큼 읽어 파일에 쓰기를 수행
- write() 함수도 실제로 쓰기를 수행한 바이트 수를 리턴하며, 오류가 발생하면 –1을 리턴

ex.
```// like +arge[]시 cp명령어 구현 가능
01 #include <fcntl.h>
02 #include <unistd.h>
03 #include <stdlib.h>
04 #include <stdio.h>
05
06 int main() {
07 int rfd, wfd, n;
08 char buf[10];
...
22 while ((n = read(rfd, buf, 6)) > 0) {
23 if (write(wfd, buf, n) != n) perror("Write"); // 예외처리
24 }
25
26 if (n == -1) perror("Read");
27
28 close(rfd);
29 close(wfd);
30 }
```

문제점:
    저장공간이 없을수 있다.
    파일 최대저장 공간을 넣어서면 write를 못하고 에러가 날 수 있다.


## 파일 오프셋 지정: lseek(2)
```
#include <sys/types.h>
#include <unistd.h>
off_t lseek(int fd, off_t offset, int whence);
```
fd : 파일 기술자
offset : 이동할 오프셋 위치 (Byte 단위)
whence : 오프셋의 기준 위치

- offset의 값은 whence의 값을 기준으로 해석
값          설명
SEEK_SET    파일의 시작을 기준으로 계산
SEEK_SUR    현재 위치를 기준으로 계산
SEEK_END    파일의 끝을 기준으로 계산

- 파일의 시작에서 다섯 번째 위치로 이동
    `lseek(fd, 5, SEEK_SET);`
- 파일의 끝에서 0번째이므로 파일 끝으로 이동
    `lseek(fd, 0, SEEK_END);`
- 현재 위치를 기준으로 0만큼 이동한 값을 구해 파일 오프셋 위치를 확인
    `cur_offset = lseek(fd, 0, SEEK_CUR);`


## 파일 기술자 복사: dup(2)
```
#include <unistd.h>
int dup(int oldfd);
```
oldfd : 복사할 파일 기술자

- 기존 파일 기술자를 인자로 받아 새로운 파일 기술자를 리턴 // 모니터 출력아 아닌 pipe 기능구현 시 사용 가능
- 이때 새로 할당되는 파일 기술자는 현재 할당할 수 있는 파일 기술자 중 가장 작은 값으로 자동 할당
- 파일 기술자의 복사는 입출력 방향 전환에 많이 사용

```
01 #include <fcntl.h>
02 #include <unistd.h>
03 #include <stdlib.h>
04 #include <stdio.h>
05
06 int main() {
07 int fd, fd1;
08
09 fd = open("tmp.aaa", O_CREAT | O_WRONLY | O_TRUNC, 0644); // fd == 3
10 if (fd == -1) {
11 perror("Create tmp.aaa");
12 exit(1);
13 }
14
15 close(1); // 표준 출력 닫기
16
17 fd1 = dup(fd); // 3번을 1번에 복사
18 printf("DUP FD=%d\n", fd1); // printf가 표준출력(모니터)가 아닌 파일로 출력된다.
19 printf("Standard Output Redirection\n");
20
21 close(fd);
22 }
```

## 파일 기술자 복사: dup2(3) - 라이브러리 함수
```
#include <unistd.h>

int dup2(int oldfd, int newfd);
```
oldfd : 복사할 파일 기술자
newfd : 파일 기술자를 복사할 곳

- dup() 함수와 달리 새로운 파일 기술자를 지정할 수 있게 해줌
- 파일 기술자 oldfd를 newfd로 복사

```
dup2(fd, 1); // 위 코드 17번: fd1 = dup(fd); 와 유사
```


## 파일 기술자 제어: fcntl(2)
```
#include <unistd.h>
#include <fcntl.h>
int fcntl(int fd, int cmd, ... /* arg */ );
```
fd : 파일 기술자
cmd : 명령
arg : cmd에 따라 필요시 지정하는 인자들

- 파일 기술자가 가리키는 파일에 cmd로 지정한 명령을 수행
- cmd의 종류에 따라 인자를 지정해야 할 수도 있음
- fcntl() 함수의 두 번째 인자인 명령은 fcntl.h 파일에 정의되어 있으며 다음 두 가지를 자주 사용
    - F_GETFL : 상태 플래그 정보를 읽어옴
    - F_SETFL : 상태 플래그 정보를 설정, 설정할 수 있는 것은 대부분 open() 함수에서 지정하는 플래그


## 파일 삭제: remove(3) - 라이브러리 함수
```
##include <stdio.h>
int remove(const char *pathname);
```
- path에 지정한 파일이나 디렉터리를 삭제
- 내부적으로 삭제 대상이 파일이면 unlink() 함수를 호출
- 삭제 대상이 디렉터리면 rmdir() 함수를 호출
- 디렉터리는 비어 있을 때만 삭제


## 파일과 디스크 동기화 함수 fsync(3)
```
#include <unistd.h>
int fsync(int fd);
```
fd : 디스크로 저장할 파일의 파일 기술자

- 메모리에 위치하고 있는 파일의 내용을 디스크로 보내 메모리와 디스크의 내용을 동기화
- 메모리의 내용이 디스크로 모두 기록되기 전에는 리턴하지 않음
// open(2) flags의 O_SYNC기능


--- 

# 고수준 파일 입출력

파일 포인터
- 열린 파일을 가리킬 때 고수준 파일 입출력에서는 파일 포인터를 사용
- 파일 포인터는 디스크에서 메모리로 읽어온 파일의 위치(주소)에 관한 정보를 담고 있는 포인터
- 파일 기술자는 정수형이지만 파일 포인터는 시스템 헤더 파일에 정의되어 있는 FILE 포인터

장점: 플랫폼 독립적인 구조이므로 어느 플랫폼에서든 동일한 동작을 수행한다는 장점


## 파일 열기: fopen(3)
```
#include <stdio.h>
FILE *fopen(const char *pathname, const char *mode)
```
pathname : 파일의 경로
mode : 파일 열기 모드

모드    의미
r // rt 읽기 전용으로 텍스트 파일을 연다.
w       새로 쓰기용으로 텍스트 파일을 연다. 기존 내용은 삭제
a       기존 내용의 끝에서 추가해서 쓰기용으로 텍스트 파일을 연다.
rb      읽기 전용으로 바이너리 파일을 연다.
wb      새로 쓰기용으로 바이너리 파일을 연다. 기존 내용은 삭제
ab      추가해서 쓰기용으로 바이너리 파일을 연다.

r+      읽기와 쓰기전용으로 텍스트 파일을 연다.
w+      쓰기와 읽기전용으로 텍스트 파일을 연다.
a+      추가 쓰기와 읽기전용으로 텍스트 파일을 연다.
rb+     쓰기와 읽기전용으로 바이너리 파일을 연다.
wb+     읽기와 쓰기전용으로 바이너리 파일을 연다.
ab+     추가해서 쓰기와 읽기전용으로 바이너리 파일을 연다.


## 파일 닫기: fclose(3)
```
#include <stdio.h>
int fclose(FILE *stream);
```
stream : fopen()에서 리턴한 파일 포인터

--- 

## 문자 기반 입력 함수: fgetc(3), getc(), getchar(), getw(3)
```
#include <stdio.h>

int fgetc(FILE *stream); 
int getc(FILE *stream); 
int getchar(void); 
int getw(FILE *stream); 
```
stream : 파일 포인터

- fgetc( ) 함수: 파일 포인터가 가리키는 파일로부터 문자 한 개를 `unsigned char` 형태로 읽어 옴
- getc() 함수: 매크로로 구현되어 있어 실행 속도는 약간 빠르지만 실행 코드가 확장되므로 메모리를 조금 더 차지
              그 외에는 fgetc() 함수와 동일한 기능을 수행
- getchar() 함수: 표준 입력에서 문자 한 개를 읽어오는 매크로로, getc(stdin)과 같음
    - 표준입력, 즉 키보드에서 문자 하나를 읽어옴
- getw() 함수는 파일에서 "워드 단위"(상대크기:16bit, 32bit, 64bit(8byte))로 읽음, 워드의 크기는 int형의 크기로 시스템에 따라 달라짐


## 문자 기반 출력 함수 : fputc(3), putc(), putchar(), putw(3)
```
#include <stdio.h>

int fputc(int c, FILE *stream);
int putc(int c, FILE *stream);
int putchar(int c);
int putw(int w, FILE *stream);
```
c, w : 출력할 문자
stream : 파일 포인터

- fputc( ) 함수: 인자로 받은 int형 데이터 c를 `unsigned char`로 변환해 파일에 사용
- putc() 함수: fputc() 함수와 같은 동작을 수행하며 getc()와 마찬가지로 매크로로 구현 되어있음
- putchar() 함수: 표준 출력으로 한 문자를 출력하는 매크로, putc(c, stdout)와 같음
- putw() 함수: "워드 단위"로 파일에 출력, 워드의 크기는 int형의 크기로 시스템에 따라 달라짐

--- 

## 문자열 기반 입력 함수: gets(3), fgets(3)
```
#include <stdio.h>
char *gets(const char *s);
char *fgets(char *s, int size, FILE *stream);
```
s : 문자열을 저장한 버퍼의 시작 주소
size : 버퍼의 크기
stream : 파일 포인터

gets() 함수의 특징 // 개행문자('\n')를 NULL문자('\0')로 치환
- 표준 입력에서 문자열을 엔터키를 입력하거나 파일의 끝 을 만날 때까지 읽음
- 읽어들인 문자열의 끝에서 개행 문자(엔터키 값)를 제외하고 널 문자(‘\0’)를 채워 인자 s가 가리키는 영역에 저장하고 리턴
- 메모리의 크기를 알 수 없기 때문에 s가 가득 찬 후에도 계속 읽을 수 있음
    - Buffer Overflow 문제 // 보안 상 위험

fgets() 함수의 특징
- 파일 포인터가 가리키는 파일에서 변수 size에 지정한 길이보다 하나 적게 문자열을 읽어 s에 저장 // 개행 문자 때문에
- size의 길이만큼 읽는 도중에 개행 문자를 만나거나 파일의 끝을 만나면 해당 지점까지만 읽어옴
- gets() 함수와 달리 ""개행 문자도 s에 저장"" 하고, 버퍼의 마지막 문자 다음에 널 문자를 저장


## 문자열 기반 출력 함수: puts(3), fputs(3)
```
#include <stdio.h>
int puts(const char *s);
int fputs(const char *s, FILE *stream);
```
s : 문자열 주소
stream : 파일 포인터

puts() 함수의 특징
- s가 가리키는 문자열을 표준 출력으로 출력, 이때 "개행 문자(‘\n’)를 추가"해 출력

fputs() 함수의 특징
- s가 가리키는 문자열을 파일 포인터가 가리키는 파일로 출력
- 출력할 때 "개행 문자를 추가하지 않음"
- 두 함수 모두 성공하면 음수가 아닌 수를 리턴하고, 파일의 끝이면 오류를 리턴

--- 

## 버퍼 기반 입력 함수: fread(3)
```
#include <stdio.h>
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);
```
ptr : 버퍼 주소
size : 읽어올 항목 크기
nmemb : 읽어올 항목 수
stream : 파일 포인터


## 버퍼 기반 출력 함수: fwrite(3)
```
#include <stdio.h>
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream);
```
ptr : 버퍼 주소
size : 항목의 크기
nmemb : 항목 수
stream : 파일 포인터

- fwrite() 함수는 출력할 때 별도로 개행문자를 추가 하지 않음


--- 

## 형식 기반 입출력
- 형식 기반 입출력 함수의 필요성
    - 만약 fgets()와 같은 함수를 사용해 파일을 읽어온다고 가정하면 과목별 점수를 구분해 떼어내는 작업을 해야 함
    - 고수준 파일 입출력은 이처럼 정해진 형식이 있는 파일을 읽을 때 유용하게 사용할 수 있는 형식 기반 입출력 함수를 제공

--- 

## 형식 기반 입력 함수: scanf(3), fscanf(3)
```
#include <stdio.h>
int scanf(const char *format, ...);
int fscanf(FILE *stream, const char *format, ...);
```
format : 입력 형식(%d, %s 등)
stream : 파일 포인터

- scanf() 함수는 표준 입력에서 입력을 받고, fscanf() 함수는 지정한 파일에서 입력을 받음
- 성공적으로 수행하면 읽은 항목의 개수를 리턴
- 입력값이 형식에 맞지 않거나 너무 빨리 파일의 끝에 도달하면 0을 리턴
- 형식에 맞는지 확인하기 전에 파일의 끝을 만나면 EOF를 리턴


## 형식 기반 출력 함수 : printf(3), fprintf(3)
```
#include <stdio.h>
int printf(const char *format, ...);
int fprintf(FILE *stream, const char *format, ...);
```
stream : 파일 포인터
format : 출력 형식

- printf() 함수는 표 준 출력으로 출력하고, fprintf() 함수는 지정한 파일로 출력
- 출력 대상이 파일이기 때문에 첫 번째 인자가 파일 포인터가 된다는 점이 차이점
- fprintf() 함수도 printf() 함수가 사용하는 형식 지정 방법을 그대로 사용
- 두 함수 모두 성공적으로 수행하면 출력한 문자 수를, 오류가 발생하면 EOF를 리턴

--- 


## 파일 오프셋 이동 : fseek(3)
```
#include <stdio.h>
int fseek(FILE *stream, long offset, int whence);
```
stream : 파일 포인터
offset : 이동할 오프셋
whence : 오프셋의 기준 위치

- lseek() 함수와 유사하게 동작
- fseek() 함수는 stream이 가리키는 파일에서 offset에 지정한 크기만큼 오프셋을 이동
- whence는 offset 값을 해석하는 방법을 결정하는 상수로, lseek() 함수에서와 같은 의미

whence에 사용할 수 있는 값
- SEEK_SET : 파일의 시작을 기준으로 계산
- SEEK_CUR : 현재 위치를 기준으로 계산
- SEEK_END : 파일의 끝을 기준으로 계산

- 성공하면 변경된 오프셋을 리턴하지만 fseek() 함수는 성공하면 0을, 실패하면 EOF를 리턴
오류예시
`cur = fseek(fp, 0, SEEK_CUR); (×)`


## 현재 오프셋 구하기 : ftell(3)
```
#include <stdio.h>
long ftell(FILE *stream);
```
stream : 파일 포인터

-인자로 지정한 파일의 현재 오프셋을 리턴
- ftell() 함수가 리턴하는 오프셋은 파일의 시작에서 현재 오프셋 위치까지의 바이트 수
- 수행에 실패하면 EOF를 리턴, 따라서 현재 "오프셋 값을 구하려면 ftell() 함수"를 다음과 같이 사용
```
long cur;
cur = ftell(fp);
```


## 처음 위치로 오프셋 이동 : rewind(3)
```
#include <stdio.h>
void rewind(FILE *stream);
```

- 오프셋 위치를 파일의 시작으로 즉시 이동


## 파일과 디스크 동기화 함수: fflush(3) // 저수준 == fsync(3)
```
#include <stdio.h>
int fflush(FILE *stream);
```

- 버퍼에 있는 데이터를 파일에 기록
- 파일을 읽기 전용으로 연 경우 버퍼에 있는 내용을 모두 비움
- 파일 포인터가 NULL이면 쓰기 전용으로 연 모든 파일에 데이터를 사용

--- 


# 파일 기술자와 파일 포인터 변환
    - 저수준 파일 입출력에서는 열린 파일을 가리킬 때 파일 기술자를 사용
    - 고수준 파일 입출력에서는 파일 포인터를 사용
    
    - 파일 기술자에서 파일 포인터를 생성하려면 fdopen() 함수를 사용
        파일 기술자 -> 파일 포인터 `FILE *fdopen(int fd, const char *mode);

    - 파일 포인터에서 파일 기술자 정보를 추출하려면 fileno() 함수를 사용
        파일 포인터 -> 파일 기술자 `int fileno(FILE *stream);`


## 파일 포인터 생성: fdopen(3)
```
#include <stdio.h>
FILE *fdopen(int fd, const char *mode);
```
fd: 파일 기술자
mode : 열기 모드


- 파일 기술자와 모드(읽기, 쓰기 등)를 인자로 받아 파일 포인터를 생성
- mode에 값을 지정할 때는 파일 기술자를 열 때와 같은 종류의 값으로 지정해야 함

- 저수준에서는 읽기 전용(O_RDONLY)으로 열었는데, 고수준으로 변환하면서 쓰기(w)로 지정하면 정상적으로 동작하지 않음
- fdopen() 함수는 성공하면 파일 포인터를, 실패하면 널 포인터를 리턴


## 파일 포인터 생성: fileno(3)
```
#include <stdio.h>
int fileno(FILE *stream);
```
stream : 파일 포인터

- 파일 포인터를 인자로 받아 파일 기술자를 리턴

--- 


# 임시 파일 사용

## 임시 파일명 생성: tmpnam(3)
```
#include <stdio.h>
char *tmpnam(char *s);
```
s : 파일명을 저장할 버퍼의 시작 주소


- 임시 파일명을 시스템이 알아서 지정
- 인자가 있으면 경우 해당 인자가 가리키는 곳에 임시 파일명을 저장
- 인자가 NULL이면 임시 파일명을 리턴

--- 

## 템플릿을 지정한 임시 파일명 생성 : mktemp(3)
```
#include <stdlib.h>
char *mktemp(char *template);
```
template : 임시 파일명의 템플릿(문자열)


- 임시 파일의 템플릿을 인자로 받아 이를 임시 파일명으로 변환해 리턴
- 인자로 지정하는 템플릿은 '대문자 X 6개'로 마쳐야 함
    `/tmp/hanbitXXXXXX`

- mktemp() 함수는 대문자 X 부분을 다른 문자로 대체해 임시 파일명을 만듦
- 임시 파일명 생성에 실패하면 널 문자열을 리턴

--- 


### tmpnam()과 mktemp()의 문제점
- 임시 파일 이름만 생성하고 파일을 '실제로 생성하지 않음'
- 이 사이에 다른 프로세스가 같은 이름의 파일을 만들 수 있음
    - (경합 조건, race condition)
- 결과적으로 임시 파일을 노출하거나 **덮어쓰기 공격(TOCTOU: Time-of-check to time-of-use)**이 발생할 수 있음


### 대안: mkstemp()와 mkdtemp()
- mkstemp(): 안전하게 임시 파일 생성 + 열기까지 한 번에 수행
- mkdtemp(): 안전하게 임시 디렉터리 생성

--- 

## 임시 파일의 파일 포인터와 파일 기술자 생성: tmpfile(), mkstemp()
```
#include 
FILE *tmpfile();
```
```
#include <stdlib.h>
int mkstemp(char *template);
```
template : 임시 파일명의 템플릿


- 대부분의 경우 프로그램을 수행할 때 임시 파일명을 반드시 알아야 하는 것은 아님

- 임시 파일에 대한 파일 포인터만 필요하면 tmpfile() 함수를 사용
- 파일 기술자가 필요하면 mkstemp() 함수를 사용

- tmpfile( ) 함수는 자동으로 'w+ 모드'로 열린 파일 포인터를 리턴
- mkstemp() 함수는 템플릿으로 임시 파일명을 지정해 열고 '파일 기술자를 리턴'
- 이 함수들로 생성한 파일 포인터와 파일 기술자는 바로 입출력에 사용할 수 있음

