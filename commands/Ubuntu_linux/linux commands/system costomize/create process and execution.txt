# 프로세스 생성 / 종료

- 프로세스 생성 함수
    - 프로그램 안에서 다른 프로그램을 실행해 새로운 프로세스를 생성할 때는 system(), fork(), vfork() 함수를 사용

- 프로세스 종료 함수
    - 리눅스는 프로세스가 종료되면 해당 프로세스가 어떻게 종료되었는지를 나타내는 종료 상태(exit code)를 저장
    - 자식 프로세스는 부모 프로세스에 자신이 어떻게 종료되었는지를 알리는 종료 상탯값을 리턴할 수 있음
    - 일반적으로 종료 상탯값이 0이면 정상적으로 종료했음을 의미하고, 0이 아니면 오류가 발생했음을 의미
    - 프로그램을 종료할 때는 exit(), _exit(), atexit(), on_exit() 함수를 사용

- exec 함수군
    - exec 함수군은 인자로 받은 다른 프로그램을 자신을 호출한 프로세스의 메모리에 덮어씀
    - 따라서 프로세스가 수행 중이던 기존 프로그램은 중지되어 없어지고 새로 덮어쓴 프로그램이 실행
    - exec 함수군은 fork() 함수와 연결해 fork() 함수로 생성한 자식 프로세스가 **새로운 프로그램을 실행**하도록 할 때도 사용

- 프로세스 동기화
- fork() 함수로 자식 프로세스를 생성하면 부모 프로세스와 자식 프로세스는 순서에 관계없이 실행
- 먼저 실행을 마친 프로세스는 종료
- 좀비 프로세스(자식 프로세스가 종료되었지만 삭제되지 않은 상태) 같은 불안정 상태의 프로세스가 발생

--- 

## 프로그램 실행 : system(3)
```
#include <stdlib.h>
int system(const char *command);
```
command : 실행할 명령이나 실행 파일명

- 기존 명령이나 실행 파일명을 인자로 받아 셸에 전달
- 셸은 내부적으로 새 프로세스를 생성해 인자로 받은 명령을 실행
- 해당 명령의 실행이 끝날 때까지 기다렸다가 종료 상태를 리턴

--- 

| 항목                    | `fork()`                                            | `vfork()`   (사용 권장 X)                                   |
|-------------------------|-----------------------------------------------------|------------------------------------------------------------|
| 주소 공간               | 부모와 자식이 각자 독립된 복사본 사용 (copy-on-write)  | 자식이 부모의 주소 공간을 공유                               |
| 속도                    | 느릴 수 있음 (복사 비용 존재)                         | 매우 빠름 (복사 안 함)                                      |
| 자식의 행동 제한         | 제한 없음 (자유롭게 변수, 메모리 변경 가능)           | 매우 제한됨 (부모 메모리를 건드리면 위험)                     |
| 표준성                  | POSIX 표준                                           | POSIX에 있으나 사용 권장 X                                  |
| 부모 상태 (자식 종료 전) | 부모와 자식 동시 실행 가능                            | 자식이 `exec()`나 `_exit()` 하기 전까지 부모는 대기(blocked) |
| 안정성                  | 안정적, 일반적으로 사용됨                             | 예외 상황에 취약, 주의해서 사용해야 함                       |
| 사용 목적               | 일반적인 프로세스 복제                                | 오직 `exec()` 직전 빠르게 자식 생성할 때만 적합              |

--- 

### fork() 함수
- 리눅스에서 프로세스를 생성해 프로그램을 실행하는 대표적인 방법은 fork() 함수를 사용하는 것
- 자식 프로세스: fork() 함수가 생성한 부모 프로세스와 똑같은 새로운 프로세스
    - 완전히 동일하지는 않음
- fork() 함수가 리턴하면 부모 프로세스와 자식 프로세스가 동시에 동작하는데, 어느 프로세스가 먼저 실행될지는 알 수 없음
- 처리 순서는 시스템의 스케줄링에 따라 달라짐

### fork() 함수의 특징
1. fork() 함수를 호출
2. 새로운 프로세스(자식 프로세스)를 생성
3. fork() 함수로 생성한 자식 프로세스의 메모리 공간은 부모 프로세스의 메모리 공간을 그대로 복사해서 만듬(COW 적용 X)
4. fork() 함수는 부모 프로세스에는 자식 프로세스의 PID를 리턴하고 자식 프로세스에는 0을 리턴

--- 


### copy-on-write(COW)
- 성능과 메모리 효율성을 높이기 위해 사용하는 최적화 기법
- 특히 fork() 시스템 호출에서 많이 사용


"처음에는 복사하지 않고, 쓸 때(copy할 때)가 되면 그제야 복사한다."
* 즉, 읽기만 하면 공유, 쓰기(변경)가 일어나면 그 시점에 복사하는 전략


#### 🧠 **어떻게 동작하나요?**

1. `fork()`를 호출하면 부모 프로세스의 메모리를 **자식과 공유**합니다. 실제로는 복사를 하지 않습니다.
2. 부모와 자식은 이 메모리 영역을 **읽기 전용**으로 공유합니다.
3. 만약 부모나 자식 중 누군가 이 메모리를 **수정**하려고 하면,

   * 운영체제가 그 페이지를 감지하고,
   * **해당 페이지를 복사**해서 자신만의 사본을 만들고,
   * 그 후 수정하게 합니다.
4. 이 과정을 **페이지 단위**로 처리하므로 효율적입니다.


#### 📦 예시 그림 (개념)

```
[초기 상태 - 공유 중]
부모 ─┬─> 메모리 페이지 A
      └─> 자식

[자식이 수정 시도 → COW 발생]
부모 ───> 메모리 페이지 A (원본)
자식 ───> 메모리 페이지 B (복사본)
```

#### ✅ 장점

* 메모리 사용량 절약 (불필요한 전체 복사 방지)
* 성능 향상 (불필요한 복사 작업 최소화)
* 자식이 `exec()`만 호출하는 경우, 복사 자체가 **아예 불필요**

#### ⚠️ **주의할 점**

* COW는 **쓰기 시점에 비용이 발생**합니다.
* 실시간 시스템이나 성능이 민감한 상황에서는 예상치 못한 지연을 초래할 수 있습니다.

#### 💬 관련 시스템 호출에서의 적용

* `fork()`는 **COW 방식**으로 부모의 메모리를 자식에게 "복사한 것처럼 보이게" 합니다.
* `vfork()`는 **공유만 하고 복사도 안 함**, 그래서 **COW조차 사용하지 않음** → 위험하지만 빠름


--- 

# 프로세스 생성

- 자식 프로세스가 상속받는 대표적인 속성
    - 실제 사용자 ID(RUID), 유효 사용자 ID(EUID), 실제 그룹 ID(RGID), 유효 그룹 ID(EGID) 
    - 환경 변수
    - 시그널 처리 설정
    - 현재 작업 디렉터리
    - 사용 가능한 자원 제한
    - 열린 파일 기술자          // open(), fd (읽는 파일 디스트립터 포인터 오프셋 공유)
    - setuid, setgid 설정
    - umask 설정값              // 파일 접근 권한 설정

- **자식 프로세스와 부모 프로세스와 다른 점**
    - 자식 프로세스는 새로 할당된 프로세스 ID를 가짐
    - 자식 프로세스는 부모 프로세스의 PPID와 다른 자신만의 PPID를 가짐
        즉, 자식 프로세스를 호출한 부모 프로세스가 자식 프로세스의 PPID로 설정
    - 자식 프로세스는 부모 프로세스가 연 파일 기술자에 대한 복사본을 갖고 있음
        부모 프로세스와 자식 프로세스가 **같은 파일의 오프셋을 공유**하고 있는 상태가 되므로 읽거나 쓸 때 주의해야 함
    - 자식 프로세스는 부모 프로세스가 설정한 프로세스 잠금, 파일 잠금, 기타 메모리 잠금 등은 상속하지 않음
    - 처리되지 않은 시그널은 자식 프로세스로 상속되지 않음
    - 자식 프로세스의 tms 구조체 값은 0으로 초기화, 즉 프로세스 실행 시간을 측정하는 기준 값이 새로 설정

--- 

## struct tms 구조체
- 프로세스의 CPU 사용 시간 정보를 저장하기 위해 사용
- 이 구조체는 주로 times() 시스템 호출과 함께 사용되며, 사용자 모드와 커널 모드에서 소비한 시간을 측정하는 데 유용
```
struct tms {
 clock_t tms_utime; // 프로세스의 사용자 모드에서의 CPU 시간
 clock_t tms_stime; // 프로세스의 커널 모드에서의 CPU 시간
 clock_t tms_cutime; // 종료된 자식 프로세스들의 사용자 모드 CPU 시간 합
 clock_t tms_cstime; // 종료된 자식 프로세스들의 커널 모드 CPU 시간 합
};
```
- 모두 clock_t 타입이며, 실제 시간(초)으로 변환하려면 sysconf(_SC_CLK_TCK) 값으로 나누어야 함


--- 

## 프로세스 생성 : fork(2)
```
#include <sys/types.h>
#include <unistd.h>
pid_t fork(void);
```
command : 실행할 명령이나 실행 파일명

- 인자를 받지 않음
- 수행에 성공하면 부모 프로세스에는 자식 프로세스의 PID를, 자식 프로세스에는 0을 리턴, 실패하면 –1을 리턴
    - 두 번(부모와 자식) 리턴

--- 

## 프로세스 생성 : vfork(2)
```
#include <unistd.h>
pid_t vfork(void);
```

- fork() 함수처럼 새로운 프로세스를 생성하지만 부모 프로세스의 메모리 공간을 모두 복사하지는 않음
- vfork() 함수로 생성한 자식 프로세스는 exec 함수군을 사용해 새로운 작업을 수행할 때 효율적
- 그러나 vfork() 함수는 과거의 유물로 버그가 발생할 우려도 있어 리눅스에서 제공은 하지만 사용을 추천하지는 않음

--- 

# 프로세스 종료


## 프로그램 종료 : exit(3)
```
#include <stdlib.h>
void exit(int status);
```
status : 종료 상탯값

- 프로세스를 종료시키고 부모 프로세스에 종료 상탯값을 전달

- 이때 atexit() 함수로 예약한 함수를 지정된 순서와 **역순**으로 모두 실행
- 만일 atexit() 함수로 예약한 함수가 수행 도중에 문제가 발생해 리턴하지 못하면 exit() 함수의 나머지 과정도 수행되지 않음

- exit() 함수는 프로세스가 사용 중이던 모든 표준 입출력 스트림에 데이터가 남아있으면 이를 모두 기록하고 열려 있는 스트림을 모두 닫음
- 그 다음 tmpfile() 함수로 생성한 임시 파일을 모두 삭제하고 _exit() 함수를 호출
- _exit() 함수는 시스템 호출인데 프로세스가 사용하던 모든 자원을 반납

--- 

## 프로그램 종료 시 수행할 작업 예약 : atexit(3)
```
#include <stdlib.h>
int atexit(void (*function)(void));
int on_exit(void (*function)(int , void *), void *arg);
```
function : 종료 시 수행할 작업을 지정한 함수명
on_exit의 int는 status로 exit(0)실행 시, 종료 값 0 을 나타냄

- atexit()와 on_exit() 함수는 프로세스가 종료할 때 수행할 기능을 예약
- 인자로 함수의 포인터를 받고 on_exit() 함수는 함수의 포인터와 이 함수의 인자의 포인터를 받음
- atexit() 함수에 인자로 지정하는 함수는 인자와 리턴값이 없는 함수

- on_exit() 함수는 SunOS 4.0에서 추가되었으나 솔라리스(SunOS 5.0)[UNIX]로 바뀌면서 더 이상 지원하지 않음
- 리눅스의 경우 gcc 라이브러리에서 on_exit() 함수를 지원하므로 함수에 인자를 지정할 필요가 있을 경우에 사용

```exit(), atexit(), on_exit() 함수 예시
01 #include <stdlib.h>
02 #include <stdio.h>
03
04 void cleanup1() {
05  printf("Cleanup 1 is called.\n");
06 }
07
08 void cleanup2(int status, void *arg) {
09  printf("Cleanup 2 is called: %ld.\n", (long) arg);
10 }
11
12 int main() {
13  atexit(cleanup1);
14  on_exit(cleanup2, (void *) 20);
15
16  exit(0);
17 }

>Cleanup 2 is called: 20.
>Cleanup 1 is called.
```

--- 

## 프로그램 종료 : _exit(2)
```
#include <unistd.h>
void _exit(int status);
```
status : 종료 상탯값

- 프로그램에서 직접 사용하지 않고 exit() 함수 내부에서 호출
- 호출로 프로세스를 종료할 때 다음과 같은 과정을 통해 시스템 관련 자원을 정리
1. 모든 파일 기술자를 닫음
2. 부모 프로세스에 종료 상태를 알림
3. 자식 프로세스에 SIGHUP 시그널을 전송
    참고: SIGHUP (Signal Hang Up), 제어 터미널(예: SSH 세션 등)이 종료되었을 때 프로세스에게 전달됨
4. 부모 프로세스에 SIGCHLD 시그널을 전송
    참고: SIGCHLD (Signal Child), 자식 프로세스가 종료되었을 때 부모 프로세스에게 전달됨
5.프로세스 간 통신에 사용한 자원을 반납

```시그널 처리 예시
#include <signal.h>
#include <sys/wait.h>
#include <unistd.h>
void handler(int sig) {
 int status;
 wait(&status);
}
int main() {
 signal(SIGCHLD, handler); // 자식 종료 시 처리
 if (fork() == 0) {
 _exit(0); // 자식 프로세스 즉시 종료
 }
 pause(); // 부모 프로세스는 시그널 기다림
 return 0;
}
```

--- 

# exec 함수군

## exec 함수군의 형태
```
#include <unistd.h>
int execl(const char *pathname, const char *arg, … /* (char *) NULL */);
int execlp(const char *file, const char *arg, … /* (char *) NULL */);
int execle(const char *pathname, const char *arg, … /*, (char *) NULL, char *const envp[] */);
int execv(const char *pathname, char *const argv[]);
int execvp(const char *file, char *const argv[]);
int execvpe(const char *file, char *const argv[], char *const envp[]);
```
- exec 함수군은 6가지 형태가 있으며 각자 지정하는 인자가 약간씩 다름
- **인자로 전달한 pathname이나 file에 설정한 명령이나 실행 파일을 실행**
- arg나 envp로 시작하는 인자를 pathname이나 file에 지정한 파일의 main() 함수에 전달
- 각 함수별로 경로명까지 지정하거나 단순히 실행 파일명만 지정하는 등 차이가 있고 인자를 전달하는 형태에도 차이가 있음


1. "l": list 형태 vs "v": vecter형태
2. "p"가 있으면 *file, 없으면 *pathname
3. "e"가 있으면 *envp[]를 인자로 받음


--- 

### 각 exec 함수군의 기능

- execl() : LIST
- pathname에 지정한 경로명의 파일을 실행하며 arg0~argn을 인자로 전달
- **첫 인자인 arg0에는 실행 파일명을 지정**
- execl() 함수의 마지막 인자로는 **인자의 끝을 의미 하는 NULL 포인터((char *)0)를 지정**해야 함
- pathname에 지정하는 경로명은 절대 경로나 상대 경로 모두 사용할 수 있음

- execlp() : PATH
- file에 지정한 파일을 실행하며 arg0~argn만 인자로 전달
- 이 함수를 호출한 **프로세스의 검색 경로(환경 변수 PATH에 정의된 경로)에서 파일을 찾음**
- arg0~argn은 포인터로 지정
- execlp() 함수의 **마지막 인자는 NULL 포인터로 지정**해야 함

- execle() : ENVP(환경변수 주소)
- pathname에 지정한 경로명의 파일을 실행하며 arg0~argn과 envp를 인자로 전달
- **envp에는 새로운 환경 변수를 설정할 수 있음**
- arg0~argn을 포인터로 지정하므로 마지막 값은 NULL 포인터로 지정해야 함
- envp는 포인터 배열
- 이 배열의 **마지막에는 NULL 문자열을 저장**해야 함

- execv() : VECTER
- **pathname에 지정한 경로명에 있는 파일을 실행하며 argv를 인자로 전달**
- **argv는 포인터 배열**
- 이 배열의 마지막에는 NULL 문자열을 저장해야 함
- 함수명에 v가 들어간 함수는 명령행 인자를 포인터 배열로 지정

- execvp() 
- file에 지정한 파일을 실행하며 argv를 인자로 전달
- **argv는 포인터 배열**
- 이 배열의 마지막에는 NULL 문자열을 저장해야 함

- execvpe() 
- pathname에 지정한 경로명의 파일을 실행하며 argv, envp를 인자로 전달
- **argv와 envp는 포인터 배열**
- 이 배열의 마지막에는 NULL 문자열을 저장해야 함

- execve() : VECTER & ENVP
    - exec 함수군들의 최종 변환 형태
```
01 #include <unistd.h>
02 #include <stdlib.h>
03 #include <stdio.h>
04
05 int main() {
06  char *argv[3];
07  char *envp[2];
08
09  printf("Before exec function\n");
10
11  argv[0] = "arg.out";
12  argv[1] = "100";
13  argv[2] = NULL;
14
15  envp[0] = "MYENV=hanbit";
16  envp[1] = NULL;
17
18  if (execve("./arg.out", argv, envp) == -1) { // 절대경로, argv, 환경변수
19      perror("execve");
20      exit(1);
21  }
22
23  printf("After exec function\n");
24 }
---------------
> arg.out
01 #include <stdio.h>
02
03 int main(int argc, char **argv, char **envp) {
04  int n;
05  char **env;
06
07  printf("\n--> In ch7_6_arg.c Main\n");
08  printf("argc = %d\n", argc);
09  for (n = 0; n < argc; n++)
10      printf("argv[%d] = %s\n", n, argv[n]);
11
12  env = envp;
13  while (*env) {
14      printf("%s\n", *env);
15      env++;
16  }
17 }
```

--- 

# 프로세스 동기화

- 정상적인 프로세스 종료 과정
    - 자식 프로세스가 종료를 위해 부모 프로세스에 종료 상태 정보를 전송
    - 이 정보를 받은 부모 프로세스는 프로세스 테이블에서 자식 프로세스를 삭제
- 좀비 프로세스의 발생
    - 자식 프로세스가 모든 자원을 반납했어도 부모 프로세스가 종료 상태 정보를 받지 않거나 자식 프로세스보다 먼저 종료하는 경우가 발생
    - 실행을 종료한 후 자원을 반납한 자식 프로세스의 종료 상태 정보를 부모 프로세스가 받지 않는 경우에는 좀비 프로세스 발생

- 좀비 프로세스의 특징
    - 좀비 프로세스는 프로세스 테이블에만 존재
        - task_struct 정보만 시스템에 존재
    - 일반적인 방법으로 제거할 수 없으며, 부모 프로세스가 wait() 함수를 호출해야 사라짐
    - 만일 자식 프로세스보다 부모 프로세스가 먼저 종료되면 자식 프로세스는 고아 프로세스가 됨
    - 고아 프로세스는 init(PID 1) 프로세스의 자식 프로세스로 등록

--- 

## 프로세스 동기화 : wait(2)
```
#include <sys/types.h>
#include <sys/wait.h>
pid_t wait(int *wstatus);
```
wstatus : 상태 정보를 저장할 주소

- 자식 프로세스가 종료할 때까지 부모 프로세스를 기다리게 함
- 자식 프로세스의 종료 상태는 wstatus에 지정한 주소에 저장
- wstatus에 NULL을 지정할 수도 있음

- 만약 부모 프로세스가 wait() 함수를 호출하기 전에 자식 프로세스가 종료되면 wait() 함수는 즉시 리턴
- wait() 함수의 **리턴값은 자식 프로세스의 PID**
- wait() 함수의 리턴값이 -1이면 살아있는 자식 프로세스가 하나도 없다는 의미

```wait() 함수 예제
01 #include <sys/types.h>
02 #include <sys/wait.h>
03 #include <unistd.h>
04 #include <stdlib.h>
05 #include <stdio.h>
06
07 int main() {
08  int status;
09  pid_t pid;
10
11  switch (pid = fork()) {
12      case -1 : /* fork failed */
13          perror("fork");
14          exit(1);
15          break;
16      case 0 : /* child process */
17          printf("--> Child Process\n");
18          exit(2);
19          break;
20      default : /* parent process */
21          while (wait(&status) != pid)
22              continue;
23          printf("--> Parent process\n");
24          printf("Status: %d, %x\n", status, status);
25          printf("Child process Exit Status:%d\n", status >> 8); // 하위 8비트는 종료 이유 저장
26          break;
27  }
28 }
```

--- 

## 특정 자식 프로세스와 동기화 : waitpid(2)
```
#include <sys/types.h>
#include <sys/wait.h>
pid_t waitpid(pid_t pid, int *wstatus, int options);
```
pid : 종료를 기다리는 PID 
status : 종료 상탯값을 저장할 주소
options : waitpid() 함수의 리턴 조건

-첫 번째 인자인 pid에 지정할 수 있는 값
    1. -1보다 작은 경우: pid의 절댓값과 같은 프로세스 **그룹 ID에 속한 자식 프로세스 중 임의의 프로세스의 상탯값**을 요청
    2. -1인 경우: wait() 함수처럼 **임의의 자식 프로세스의 상탯값**을 요청
    3. 0인 경우: 함수를 호출한 프로세스와 **같은 프로세스 그룹에 속한 임의의 프로세스의 상탯값**을 요청
    4. 0보다 큰 경우: 지정한 pid에 해당하는 프로세스의 상탯값을 요청

- 세 번째 인자인 options에 지정할 수 있는 값
    - sys/wait.h 파일에 정의되어 있으며, OR 연산으로 연결해 지정할 수 있음

    - WCONTINUED : 수행 중(중단 됐다 다시 수행하기 시작한)인 자식 프로세스의 상탯값을 리턴
    - WNOHANG : pid로 지정한 자식 프로세스의 상탯값을 즉시 리턴받을 수 없어도 이를 호출한 프로세스의 실행을 블로킹하지 않고 다른 작업을 수행하게 함
    - WNOWAIT : 상탯값을 리턴한 프로세스가 대기 상태로 머물 수 있도록 함
        - 여전히 자식은 좀비 상태로 남아 있음
    - WUNTRACED : 실행을 중단한 자식 프로세스의 상탯값을 리턴, 실행이 중단되었으므로 더 이상 상탯값을 리턴하지 않음

```waitpid() 예제
01 #include <sys/types.h>
02 #include <sys/wait.h>
03 #include <unistd.h>
04 #include <stdlib.h>
05 #include <stdio.h>
06
07 int main() {
08  int status;
09  pid_t pid;
10
11  if ((pid = fork()) < 0) { /* fork failed */
12  perror("fork");
13  exit(1);
14  }
15
16  if (pid == 0) { /* child process */
17      printf("--> Child process\n");
18      sleep(3);
19      exit(3);
20  }
21
22  printf("--> Parent process\n");
23
24  while (waitpid(pid, &status, WNOHANG) == 0) {
25      printf("Parent still wait...\n");
26      sleep(1);
27  }
28
29  printf("Child Exit Status : %d\n", status>>8);
30 }
```

--- 

## 특정 자식 프로세스와 동기화 : waitid(2)
```
#include <sys/types.h>
#include <sys/wait.h>
int waitid(idtype_t idtype, id_t id, siginfo_t *infop, int options);
```
idtype : 종료를 기다리는 자식 프로세스 유형 정의
id : 식별 번호
infop : siginfo_t 구조체 포인터
options : waitid() 함수의 리턴 조건

- POSIX 표준으로 리눅스에서 제공, 유닉스 시스템에서는 제공하지 않을 수도 있음
- waitpid() 함수와 마찬가지로 특정 자식 프로세스가 종료하기를 기다리게 할 수 있음
- waitpid() 함수가 기다리는 자식 프로세스의 PID만 인자로 지정 하는 것과 달리 좀 더 세부적으로 정의할 수 있음
- waitid() 함수가 성공하면 0을 반환하고 오류가 발생하면 –1을 리턴


- waitid() 함수의 인자
    - idtype: 기다리는 자식 프로세스를 지정하며, 다음 값 중 하나를 지정
        - P_PID : pid가 id와 일치하는 자식 프로세스를 기다림
        - P_GID : gid가 id와 일치하는 자식 프로세스를 기다림
        - P_ALL : 모든 자식 프로세스를 기다림, 이 경우 id 값은 무시

    - id: pid나 gid 등 자식 프로세스를 구분할 수 있는 식별 번호를 지정

    - infop: waitid() 함수가 성공하면 결괏값을 채워서 돌려주는 siginfo_t 구조체
        - si_pid : 자식 프로세스의 PID 
        - si_uid : 자식 프로세스의 UID 
        - si_signo : 시그널로 항상 SIGCHLD로 설정
        - si_status : 자식 프로세스의 종료 상탯값
        - si_code : 자식 프로세스가 종료된 이유 코드 저장
        - CLD_EXITED : 자식 프로세스가 _exit() 함수를 호출해 종료
        - CLD_KILLED : 자식 프로세스가 시그널을 받고 종료
        - CLD_DUMPED : 자식 프로세스가 시그널을 받고 종료하고 코어 덤프 수행
        - CLD_STOPPED : 자식 프로세스가 시그널을 받고 중단된 상태
        - CLD_CONTINUE : SIGCONT 시그널을 받고 자식 프로세스가 계속 실행
        
    - options : waitid() 함수의 리턴 조건은 다음 값을 OR로 연결할 수 있음
        - WEXITED : 자식 프로세스가 종료될 때까지 기다림
        - WSTOPPED : 시그널을 받아 중단된 자식 프로세스를 기다림
        - WCONTINUED : 시그널을 받아 다시 수행 중인 자식 프로세스를 기다림
        - WNOHANG : waitpid()에서와 같음
        - WNOWAIT : 상탯값을 리턴한 프로세스가 대기 상태로 머물 수 있도록 함
