# 리눅스의 파일 구성
1. 파일명
- 사용자가 파일에 접근할 때 사용

2. Inode
- 일의 소유자나 크기 등의 정보와 실제 데이터를 저장하고 있는 데이터 블록의 위치를 나타내는 주소들이 저장

3. 데이터 블록
- 실제로 데이터가 저장

---

1. 파일명: 사용자가 파일을 식별하고 접근할 때 사용하는 이름
- 리눅스에서는 디렉터리가 파일명을 관리하는 역할을 수행하며, 디렉터리는 단순히 파일명과 Inode 번호를 연결하는 역할을 함
- 한 개의 Inode 번호는 여러 개의 파일명(하드 링크)과 연결될 수 있음
- 파일명 자체는 Inode 정보에 저장되지 않고, 디렉터리 엔트리에 따로 저장됨

2.node: 파일의 메타데이터(파일 정보)를 저장하는 구조체
- Inode는 파일을 식별하는 고유한 번호로 할당되며, 파일 시스템 내에서 동일한 번호를 가진 Inode는 없음
- Inode에 저장되는 주요 정보
    - 파일 유형 (일반 파일, 디렉터리, 심볼릭 링크 등)
    - 파일 크기소유자 (UID, GID)
    - 파일 권한 (읽기, 쓰기, 실행)
    - 생성/수정/접근 시간 (ctime, mtime, atime)
    - 데이터 블록의 위치 정보 (파일의 실제 데이터가 저장된 블록 주소)
- Inode에는 파일명 정보가 포함되지 않으며, 파일명은 디렉터리에 별도로 저장됨
- ~$ ls -i 명령을 사용하면 파일의 Inode 번호를 확인할 수 있음

3.데이터 블록 (Data Block): 파일의 실제 데이터가 저장되는 하드디스크의 공간
- 데이터 블록은 고정된 크기(일반적으로 4KB 등)로 할당되며, 파일 크기가 크면 여러 개의 데이터 블록에 걸쳐 저장됨
- Inode는 파일의 데이터 블록 위치를 저장하고 있으며,
     직접 블록(Direct blocks(12개x4kb=48kb)), 간접 블록(Single indirect)(4MB==1024x4kB), 이중 간접 블록(Double indirect)(4GB==1024x1024x4kB), 삼중 간접(Triple) 블록을 사용하여 큰 파일도 저장할 수 있음
- 파일 크기가 작은 경우, 일부 파일 시스템(ext4 등)에서는 Inode 내에 직접 데이터를 저장하는 경우도 있음(Small File Optimization)

