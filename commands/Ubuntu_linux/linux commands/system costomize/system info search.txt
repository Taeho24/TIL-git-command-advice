# 시스템 정보 검색

## 시스템 정보 검색 함수
- uname() 함수: 설치된 운영 체제 정보와 같은 시스템 기본 정보를 검색할 수 있음
- sysconf() 함수: 시스템 자원 정보를 검색할 수 있음
- fpathconf() 함수와 pathconf() 함수: 파일과 디렉터리 자원 정보를 검색할 수 있음

--- 

## 운영체제 기본 정보 검색

uname 명령
- 시스템에 설치된 운영체제의 이름과 버전, 호스트명, 하드웨어 종류 등을 검색하려면 uname 명령을 사용
- uname 명령에 -a 옵션을 지정하면 현재 시스템에 설치되어 있는 운영체제 정보가 출력
```
$ uname –a

Linux   jw09    5.8.0-44-generic  #50~20.04.1-Ubuntu SMP Wed Feb 10 21:07:30 UTC 2021
커널명  호스트명 커널 버전          커널 릴리즈(배포버전)
x86_64     x86_64      x86_64   GNU/Linux
하드웨어명  프로세서명  플랫폼명  운영체제명
```

--- 

## 운영체제 정보 검색: uname(2)
```
#include <sys/utsname.h>
int uname(struct utsname *buf);
```
buf : utsname 구조체 주소 (UNIX time-sharing system)

- 운영체제 정보를 검색해 utsname 구조체에 저장
- utsname 구조체는 sys/utsname.h 파일에 정의되어 있고 man –s 2 uname으로 확인할 수 있음
```utsname
struct utsname {
char sysname[];     // 현재 운영체제의 이름을 저장
char nodename[];    // 네트워크를 통해 통신할 때 사용하는 시스템의 이름을 저장
char release[];     // 운영체제의 릴리즈 번호를 저장(커널 정보)
char version[];     // 운영체제의 버전 번호를 저장(릴리즈-배포버전 정보)
char machine[];     // 운영체제가 동작하는 하드웨어의 표준 이름(아키텍처)을 저장
};
```

--- 

## BSD 계열 유닉스의 호스트명 검색 함수
```
#include <unistd.h>
int gethostname(char *name, size_t len);
int sethostname(const char *name, size_t len);
```
len: name의 길이

- BSD 계열의 유닉스에서는 호스트 이름을 검색하고 설정하기 위한 별도의 함수를 제공

- 이 함수들은 SVR4에도 이식
- gethostname() 함수: 현재 시스템에 설정된 호스트 이름을 검색하여 name에 저장
- sethostname() 함수: 새로 설정할 호스트 이름을 name에 지정

--- 

### 솔라리스의 sysinfo() 함수: [중요X]
```
#include <sys/systeminfo.h>
long sysinfo(int command, char *buf, long count);
```
- 솔라리스에서는 시스템 정보를 검색하거나 설정할 수 있는 sysinfo( ) 함수를 제공

- sysinfo() 함수: command에 지정한 검색 또는 설정 명령에 따른 값을 buf에 저장
- 솔라리스와 달리 리눅스에서 sysinfo( ) 함수는 메모리와 프로세스 정보를 검색할 때 사용

--- 

## 시스템 자원 정보 검색 : sysconf(3)
```
#include <unistd.h>
long sysconf(int name);
```
name : 검색할 정보를 나타내는 상수

- 검색하려는 시스템 정보를 나타내는 상수를 인자로 받고 현재 설정되어 있는 시스템 자원값 또는 옵션값을 리턴
- 오류가 발생하면 –1을 리턴

- sysconf() 함수의 인자로 지정할 수 있는 상수는 sys/unistd.h 파일에 정의

| 상수                | 설명                                                         |
|---------------------|------------------------------------------------------------|
| _SC_ARG_MAX         | `exec()` 계열 함수에 사용하는 인자의 최대 크기              |
| _SC_CHILD_MAX       | 한 UID에 허용되는 최대 프로세스 개수                          |
| _SC_HOST_NAME_MAX   | 호스트명의 최대 길이                                         |
| _SC_LOGIN_NAME_MAX  | 로그인명의 최대 길이 (byte)                                  |
| _SC_CLK_TCK         | 초당 클록 틱 수                                              |
|                     | 100tick/s == 10ms // 초당 1틱씩 증가 시킴                    |
|                     | 초당 프로세스 처리량은 늘지만 스케줄링 속도(10ms)에 한계가 있다.|
|                     | 1000tick/s로 증가시키면 == 1ms                                |
|                     | 초당 응답은 늘어나지만 처리량은 낮아진다.                     |
| _SC_OPEN_MAX        | 프로세스당 열 수 있는 최대 파일 수                            |
| _SC_PAGESIZE        | 시스템 메모리의 페이지 크기                                   |
| _SC_VERSION         | 시스템이 지원하는 POSIX.1 버전                               |

--- 


## 파일과 디렉터리 자원 검색 : fpathconf(3)/pathconf(3)
```
#include <unistd.h>
long fpathconf(int fd, int name);
long pathconf(const char *path, int name);
```
fd : 파일 기술자
path : 파일이나 디렉터리 경로
name : 검색할 정보를 지정하는 상수
fpathconf() 함수의 특징

- 열린 파일의 파일 기술자인 fd를 인자로 받아 이 파일과 관련된 자원값이나 옵션값 정보를 검색
- path에 지정한 파일이나 디렉터리와 관련해 설정된 자원값이나 옵션값을 리턴
- 이 함수들은 성공하면 결과를 정수로 리턴하고 오류가 발생하면 –1을 리턴

상수            설명
_PC_LINK_MAX    파일에 가능한 최대 (하드)링크 수
_PC_NAME_MAX    파일명의 최대 길이를 바이트 크기로 표시
        //리눅스 기본 파일시스템:ext, 윈도우 기본 파일 시스템: NTFS
_PC_PATH_MAX    상대 경로명의 최대 길이를 바이트 크기로 표시

--- 


# 사용자 정보 검색


## 로그인명 검색 : getlogin(3)
`$ who` // 현재 로그인된 계정의 목록 출력

```
#include <unistd.h>
char *getlogin(void);
```
(void는 인자로 아무것도 지정하지 않음을 의미) 

- /var/run/utmp 파일을 검색해 현재 프로세스를 실행한 사용자의 로그인 명을 찾아 리턴
- 만약 이 프로세스를 실행한 사용자가 로그아웃했거나 rsh(remote shell) 등으로 원격에서 실행한 프로세스에서 getlogin() 함수를 호출하면 사용자명을 찾지 못하고 널 포인터를 리턴하므로 주의

--- 

## 백그라운드 프로그램 실행
`$ nohup <프로세스>`(no hang up) // 로그아웃으로 세션과의 연결이 종료되어도 데몬 형태로 실행되어 종료X
    // 755 permission 필요
`$ <프로세스> &` // 백그라운드 실행 // 예전에는 눈이만 안보일 뿐 로그아웃시 종료 >> nohup과 동일하게 종료되지 않는 옵션이 디폴트 적용

--- 

## UID 검색 : getuid(2)/geteuid(2)
```
#include <unistd.h>
#include <sys/types.h>

uid_t getuid(void);
uid_t geteuid(void);
```
fd : 파일 기술자
path : 파일이나 디렉터리 경로
name : 검색할 정보를 지정하는 상수

- getuid() 함수는 현재 프로세스의 실제 사용자 ID를, geteuid() 함수는 유효 사용자 ID를 리턴, 두 함수 모두 인자를 받지 않음

- 실제 사용자 ID(RUID) : 로그인할 때 사용한 로그인명에 대응하는 UID로, 프로그램을 실행하는 사용자
- 유효 사용자 ID(EUID) : 프로세스에 대한 접근 권한을 부여할 때 사용, 처음 로그인할 때는 실제 사용자 ID와 유효 사용자ID가 같지만,
                     setuid가 설정된 프로그램을 실행하거나 다른 사용자 ID로 변경할 경우 유효 사용자 ID는 달라짐

--- 

## 계정명 만들기
`$ sudo adduser <계정명>` // 계정생성
- adduser 로 사용자를 추가하면 여러가지 개인정보, 비밀번호 생성 및 home 디렉토리 생성을 자동으로 진행

`$ sudo usermod <options> <group> <id:계정명>` // 관리자 권한 부여(sudoer 목록에 추가)
//ex. $ sudo usermod -aG sudo new_user

# 사용자 권한 확인 (사용자 등록 그룹 확인)
`$ groups <계정명>`

# 비밀번호 변경
`$ passwd <계정명>`

`$ sudo userdel <option> <id>` // 계정삭제
//ex. $ sudo userdel -r new_user


`$ cat /etc/passwd`
`$ grep <계정명> /etc/passwd`
<계정명>:x:1000:1000:<계정설명>:/home/<계정명>:/bin/bash
│        │  │    └GID └계정설명    └ 홈 디렉터리 └로그인 셸
└로그인ID│  └UID:1001, 1002, ...
         └패스워드

- <계정명> 사용자가 속한 그룹의 ID는 1000인데 리눅스에서는 사용자 계정을 등록할 때 UID와 같은 값으로 GID를 생성
- /etc/group 파일을 보면 GID 1000은 <계정명> 그룹
- 로그인 셸은 배시 셸(/bin/bash)로 지정

--- 

```passwd 구조체
struct passwd {
char *pw_name;      // 로그인명을 저장
char *pw_passwd;    // 암호를 저장, 요즘은 거의 대부분의 리눅스 시스템이 암호를 별도의 파일에 저장하므로 의미 없는 항목(/etc/shadow에 저장)
uid_t pw_uid;       // UID를 저장
gid_t pw_gid;       // 기본 그룹 ID를 저장
char *pw_gecos;     // 사용자 실명이나 기타 정보를 저장
char *pw_dir;       // 홈 디렉터리를 저장
char *pw_shell;     // 로그인 셸을 저장
};
```

--- 

## /etc/shadow 파일
- Linux 및 Unix 계열 시스템에서 사용자 비밀번호 관련 정보를 보관하는 고보안 시스템 파일
- 예전에는 /etc/passwd에 비밀번호 해시까지 들어 있었지만, 보안상의 이유로 현재는 암호 정보를 별도의 파일로 분리해서 /etc/shadow에 저장
    + hash()값을 찾기위한 레인보우테이블(경우의 수를 다 찾아 놓는것)을 보안하기위해 salt값을 추가

`$ sudo cat /etc/shadow`

--- 

## UID로 /etc/passwd 파일 읽기 : getpwuid(3)
```
#include <sys/types.h>
#include <pwd.h>
struct passwd *getpwuid(uid_t uid);
```
uid : 검색할 UID

- /etc/passwd 파일에서 uid를 찾아 passwd 구조체에 결과를 저장하고 주소를 리턴
- 만약 uid에 해당하는 사용자를 찾지 못하면 널 포인터를 리턴

--- 

## 이름으로 passwd 파일 읽기 : getpwnam(3)
```
#include <sys/types.h>
#include <pwd.h>
struct passwd *getpwnam(const char *name);
```
name : 로그인명

- 로그인명을 받아 /etc/passwd 파일에서 사용자 정보를 검색한 후 검색 결과를 passwd 구조체에 저장하고 주소를 리턴
- 만일 로그인명에 해당하는 사용자를 찾지 못하면 널 포인터를 리턴

--- 

## /etc/passwd 파일을 순차적으로 읽기 : getpwent(3), setpwent(3), endpwent(3), fgetpwent(3)
```
#include <sys/types.h>
#include <pwd.h>

struct passwd *getpwent(void);
void setpwent(void);
void endpwent(void);
struct passwd *fgetpwent(FILE *stream);
```
stream : 파일 포인터

- getpwent( ) 함수: /etc/passwd 파일에서 사용자 정보를 순차적으로 읽어옴
- setpwent( ) 함수: /etc/passwd 파일의 오프셋을 파일의 처음에 놓음
- endpwent( ) 함수: /etc/passwd 파일을 닫음
- fgetpwent( ) 함수: 파일 포인터를 인자로 받음

--- 

## /etc/shadow 파일의 구조
`$ cat /etc/shadow`
root:!:18654:0:99999:7:::
│    │   │   │   │   │ └계정 만료일:flag(flag는 사용X)
│    │   │   │   │   └경고기간
│    │   │   │   └최대 변경일
│    │   │   └최소 변경일
│    │   └마지막 변경일
│    └패스워드
└로그인ID


### /etc/shadow의 암호 필드 예시
| 상태               | /etc/shadow의 암호 필드 예시 | 설명                                                             |
|--------------------|---------------------------|------------------------------------------------------------------|
| 정상 암호           | `$6$abcd...`               | - SHA-512 해시된 암호                                            |
| 비밀번호            | 빈 문자열 `""`            | - 누구나 암호 없이 로그인 가능 (보안상 위험)                     |
| 로그인 불가         | `*` 또는 `!*`              | - 어떤 암호로도 로그인 불가 (시스템 계정용)                      |
| 잠금된 사용자 계정  | `!$6$abcd`                 | - 비밀번호 앞에 `!` 추가 → 잠금 상태 (잠금 해제는 `passwd -u`)  |


--- 

- /etc/shadow 파일은 사용자 패스워드 정보와 패스워드의 주기 정보를 저장

```spwd 구조체
struct spwd {
char *sp_namp;          // 로그인명을 저장
char *sp_pwdp;          // 사용자 계정의 패스워드를 암호화해 저장
int sp_lstchg;          // 패스워드를 변경한 날짜 정보로, 1970년 1월 1일부터 일 수로 계산해 저장
int sp_min;             // 변경된 패스워드를 사용해야 하는 최소 일 수
int sp_max;             // 현재 패스워드를 사용할 수 있는 최대 일 수
int sp_warn;            // 패스워드를 변경할 날이 되기 전에 경고를 시작하는 일 수
int sp_inact;           // 패스워드가 만료된 이후 사용자 계정이 정지될 때까지의 일 수
int sp_expire;          // 사용자 계정이 만료되는 날짜 정보로, 1970년 1월 1일부터 일 수로 표시
unsigned int sp_flag;   // 나중에 사용하기 위해 예약된 공간으로, 현재는 사용하지 않음
};
```

--- 

## /etc/shadow 파일 검색 : getspnam(3)
```
#include <shadow.h>
struct spwd *getspnam(const char *name);
```
name : 검색할 사용자명

- 인자로 지정한 사용자의 패스워드 정보를 읽어옴

--- 

## /etc/shadow 파일을 순차적으로 읽기 : getspent(3), setspent(3), endspent(3), fgetspent(3) 
```
#include <shadow.h>

struct spwd *getspent(void);
void setspent(void);
void endspent(void);
struct spwd *fgetspent(FILE *stream);
```
stream : 파일 포인터

- getspent() 함수: /etc/shadow 파일에서 패스워드 정보를 순차적으로 읽어오며, /etc/ shadow 파일의 끝을 만나면 널(Null) 포인터를 리턴
- setspent() 함수: /etc/shadow 파일의 오프셋을 파일의 처음으로 위치시킴
- endspent() 함수: /etc/shadow 파일을 닫음
- fgetspent() 함수: /etc/shadow 파일이 아닌 파일 포인터로 지정한 다른 파일에서 패스워드 정보를 읽어옴


--- 

## 그룹 ID 검색하기 : getgid(2), getegid(2)
```
#include <unistd.h>
#include <sys/types.h>
gid_t getgid(void);
gid_t getegid(void);
```
stream:: 파일 포인터
    //git_t 대신 int형도 상관 없음

- 실제 그룹 ID를, getegid() 함수는 유효 그룹 ID를 리턴
- UID와 마찬 가지로 프로세스와 관련된 GID의 종류도 두 가지
- 실제 그룹 ID(RGID): 로그인할 때 사용한 사용자 계정의 기본 그룹
- 유효 그룹 ID(EGID): 프로세스 접근 권한을 부여할 때 사용

--- 

## group 구조체
$ cat /etc/group
- /etc/passwd 파일처럼 그룹 정보는 /etc/group 파일에 한 행씩 저장되며, 항목은 콜론(:)으로 구분

```grp.h
struct group {
char *gr_name;      // 그룹명
char *gr_passwd;    // 그룹 패스워드를 저장, 보통은 공백
gid_t gr_gid;       // 그룹 ID 번호를 저장
char * *gr_mem;     // 그룹의 멤버인 로그인명을 저장, 문자열을 가리키는 포인터
};
```

--- 

## /etc/group 파일 검색 : getgrnam(3), getgrgid(3)
```
#include <sys/types.h>
#include <grp.h>
struct group *getgrnam(const char *name);
struct group *getgrgid(gid_t gid);
```
name : 검색하려는 그룹명
gid : 검색하려는 그룹의 ID

--- 

## /etc/group 파일을 순차적으로 읽기 : getgrent(3), setgrent(3), endgrent(3), fgetgrent(3)
```
#include <sys/types.h>
#include <grp.h>

struct group *getgrent(void);   // /etc/group 파일에서 그룹 정보를 순차적으로 읽어옴. /etc/group 파일의 끝을 만나면, 널 포인터를 리턴
void setgrent(void);    // /etc/group 파일의 오프셋을 파일의 처음으로 위치시킴
void endgrent(void);    // /etc/group 파일을 닫음
struct group *fgetgrent(FILE *stream);  // /etc/group 파일이 아닌 파일 포인터로 지정한 다른 파일에서 그룹 정보를 읽어옴
```
stream : 파일 포인터

--- 

## 리눅스에서 로그인 정보 검색
- `$ who` 명령어로 현재 시스템에 로그인한 사용자 정보 검색 가능
- `$ last` 명령어로는 시스템의 부팅 시각 정보나 사용자 로그인 기록 등을 검색할 수 있음

## 로그인 정보 저장
- /var/run/utmp     // 현재 로그인 정보
- /var/log/wtmp     // 접속 종료 정보
- /var/log/btmp     // 로그인 실패 정보

--- 

## utmp 구조체

```utmp.h
#struct utmp {
short ut_type;
pid_t ut_pid;
char ut_line[UT_LINESIZE];  // 사용자가 로그인한 장치명
char ut_id[4];              // 터미널 이름
char ut_user[UT_NAMESIZE];  // 사용자명을 저장
char ut_host[UT_HOSTSIZE];
struct exit_status ut_exit; // 프로세스가 DEAD_PROCESS인 경우 프로세스의 종료 상태를 저장
long ut_session;            // 해당 정보의 세션 번호
struct timeval ut_tv;       // 해당 정보를 마지막으로 변경한 시각
int32_t ut_addr_v6[4];      // 원격 접속한 경우 원격 호스트의 인터넷 주소를 저장
char __unused[20];          // 추후 사용을 위해 예약해둔 부분
};
```

### $man -s 5 utmp
```ut_exit
struct exit_status{
    short e_termination;
    short e_exit;
}
```


### t_type
- 현재 읽어온 항목에 저장된 데이터 형식을 나타냄

| 이름               | 상수  | 의미                                          |
|--------------------|-------|---------------------------------------------|
| EMPTY              | 0     | 빈 항목                                      |
| RUN_LVL            | 1     | 시스템의 런레벨이 변경되었음을 나타냄         |
| BOOT_TIME          | 2     | 시스템 부팅 시각                             |
| NEW_TIME           | 3     | 시스템 클럭이 변경된 다음의 시간 정보         |
| OLD_TIME           | 4     | 시스템 클럭이 변경되기 전의 시간 정보        |
| INIT_PROCESS       | 5     | `init`이 생성한 프로세스임을 나타냄            |
| **LOGIN_PROCESS**  | 6     | 사용자 로그인을 위한 세션 리더 프로세스       |
| USER_PROCESS       | 7     | 일반 프로세스                                 |
| DEAD_PROCESS       | 8     | 종료한 프로세스                               |
| ACCOUNTING         | 9     | 사용하지 않는 항목                           |

--- 

##/var/log/utmp 파일 순차적으로 읽기 : getutent(3), setutent(3), endutent(3), utmpname(3)
```
#include <utmp.h>
struct utmp *getutent(void);
void setutent(void);
void endutent(void);
int utmpname(const char *file);
```
file : 지정할 파일명

- getutent() 함수: /var/run/utmp 파일에서 로그인 정보를 순차적으로 읽음
                   /var/run/utmp 파일의 끝을 만나면 널 포인터를 리턴
- setutent() 함수: /var/run/utmp파일의 오프셋을 파일의 시작에 위치시킴
- endutent() 함수: /var/run/utmp 파일을 닫음
- utmpname() 함수: 로그인 정보 파일을 file로 지정한 다른 파일로 변경
            예를 들어, last 명령에서 사용하는/var/adm/wtmp 파일로 변경할 때 사용

```who
01 #include <sys/types.h>
02 #include <utmp.h>
03 #include <stdio.h>
04
05 int main() {
06  struct utmp *ut;
07
08  printf("LoginName Line\n");
09  printf("---------------\n");
10
11  while ((ut=getutent()) != NULL) {
12  if (ut->ut_type != USER_PROCESS)
13  continue;
14  printf("%s %s\n", ut->ut_user, ut->ut_line);
15  }
16 }
```

--- 

# 시간 관리 함수

## 초 단위로 현재 시간 정보 얻기 : time(2)
```
#include <time.h>

time_t time(time_t *tloc);
```
tloc : 검색한 시간 정보를 저장할 주소

- time() 함수는 1970년 1월 1일 0시 0분 0초(UTC)부터 현재까지 경과된 시간을 초 단위로 알림
- tloc가 널이 아니면 tloc가 가리키는 주소에 시간 정보를 저장하고, 널이면 시간 정보를 리턴
- time() 함수는 실패하면 -1을 리턴

### date 명령어
`$ data -d @~` // time함수로 얻은 정보를 날짜,시간으로 바꿔서 보여주는 명령어

--- 

## 마이크로초 단위로 시간 정보 얻기 : gettimeofday(3)
```
#include <sys/time.h>
int gettimeofday(struct timeval *tv, struct timezone *tz);
int settimeofday(const struct timeval *tv, const struct timezone *tz);
```
tv : 시간 정보 구조체 주소
tz : 시간대 정보 구조체 주소 // 일반적으로는 NULL값 입력 // KST: +9

- 시간 정보를 timeval 구조체에 저장해 리턴
- tz는 시간대를 나타내는 구조체이지만 사용하지 않으므로 NULL로 지정해도 됨
- timeval 구조체는 초와 마이크로초 단위로 시간 정보를 알려줌
```
struct timeval {
time_t tv_sec; /* 초 */
suseconds_t tv_usec; /* 마이크로초 */
};
```
- tv가 널이면 시간 정보를 읽어올 수 없음
- 성공하면 0을, 실패 하면 -1을 리턴

--- 

## 시간대 설정 : tzset(3)
```
#include <time.h>

void tzset(void);
```

- 현재 지역의 시간대로 설정
- 이 함수를 호출하면 **전역 변수**에 정보가 설정
```
extern char *tzname[2]; 
extern long timezone;
extern int daylight;
```
- tzname : 지역 시간대와 보정된 시간대명을 약어로 저장
- timezone : UTC와 지역 시간대와의 시차를 초 단위로 저장
- daylight : 서머타임제를 시행하면 1이 아니고, 그렇지 않으면 0임
    - 서머타임 적용 중인지 여부와는 무관함, 서머타임을 지원하는 시간대임을 의미

--- 

## 시간 정보 분해: tm 구조체
```
#struct tm { 
int tm_sec;     // 초(0~60) // 윤초(60)
int tm_min;     // 분(0~59)
int tm_hour;    // 시(0~23)
int tm_mday;    // 일(1~31) // 일 수만 달력 체계로(0~30 X)
int tm_mon;     // 월(0~11). 0은 1월, 11은 12월을 의미
int tm_year;    // 연도. ‘연도 - 1900’ 값을 리턴 // 2025년 -> 125 (+1900)
int tm_wday;    // 요일(0~6). 0은 일요일, 6은 토요일을 의미
int tm_yday;    // 일 수(0~365) // 윤년(2월 29일)
int tm_isdst;   // 서머타임제 시행 여부. 1이면 서머타임제 실시 중임을 의미
};
```

--- 

## 초 단위 시간 정보 분해 : gmtime(3), localtime(3)
```
#include <time.h>

struct tm *gmtime(const time_t *timep);
struct tm *localtime(const time_t *timep);
```
timep : **초 단위 시간 정보**를 저장한 주소

- 두 함수 모두 초 단위 시간 정보를 인자로 받아 tm 구조체 형태로 리턴
- gmtime() 함수: UTC(+0) 시간대를 기준으로 시간을 분해 // greenwich mean time
- localtime() 함수: gmtime()과 같은 결과를 산출하지만, UTC(+0) 대신 지역 시간대를 기준으로 시간을 처리

--- 

## 초 단위 시간으로 역산 : mktime(3)
```
#include <time.h>
time_t mktime(struct tm *tm);
```
tm : 시간 정보를 저장한 tm 구조체 주소

- gmtime()이나 localtime() 함수와 반대 역할을 수행
- tm 구조체 형태의 시간을 인자로 받아 이를 1970년 1월 1일 0:0:0(UTC)부터 얼마나 지났는지 초 단위로 계산해 리턴

--- 

## 초 단위 시간을 변환해 출력하기 : ctime(3)
```
#include <time.h>
char *ctime(const time_t *timep); // calendar time
```
timep : 초 단위 시간 정보를 저장한 주소

- 초 단위 시간을 인자로 받아 사람이 보기 편한 형태로 변환해 **문자열**로 리턴
`요일 월 일 시:분:초 연도`

--- 

## tm 구조체 시간을 변환하여 출력하기 : asctime(3)
```
#include <time.h>
char *asctime(const struct tm *tm);
```
tm : 시간 정보를 저장한 tm 구조체 주소

- tm 구조체로 분해된 시간을 인자로 받고 사람이 보기 편한 형태로 변경해 문자열로 리턴
- 출력되는 형태는 ctime() 함수의 출력 형태와 동일

--- 

## 출력 형식 기호를 사용하여 출력하기 : strftime(3)
```
#include <time.h>
size_t strftime(char *s, size_t max, const char *format, const struct tm *tm);
```
s : 출력할 시간 정보를 저장할 배열 주소
max : 배열 s의 크기
format : 출력 형식을 지정한 문자열
tm : 출력할 시간 정보를 저장한 구조체 주소

- tm이 가리키는 tm 구조체에 저장된 시간 정보를 format에 지정한 출력 형식에 따라 변환해 s가 가리키는 배열에 저장

- format 시간 정보 출력 형식 지정자
    - %x: 지역시간대에 적합한 날짜 표시
    - %X: 지역시간대에 적합한 시간 표시
    - %d: 날짜(1~31)  
    - %m: 월(01~12)
    - %k: 24시간 기준준 시간(0~23), 한자릿수는 앞에 공백추가
    - %M: 분(00~59)
    - %Y: 네 자리수 연도
    - %D: 날짜(%m/%d/%y)
    - %F: %Y-%m-%d 형태로 표현

