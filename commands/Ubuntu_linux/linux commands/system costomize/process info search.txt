# 프로세스(Process)
- 현재 실행중인 프로그램을 의미

Multi processing: CPU가 2개이상이어서 process를 동시에 처리할수 있음
Multi programming: CPU는 1개지만 process를 동시에 처리하는 것처럼 스케줄링

- 현재 리눅스 시스템에서 실행 중인 프로세스를 확인하려면 ps, top 명령을 사용
- 시스템에서 프로세스를 식별하는 데는 프로세스 ID(PID)를 사용하고, 관련 프로세스들이 모여 프로세스 그룹을 구성

## 세션(Sessions)
- POSIX 표준에서 제안한 개념으로, 사용자가 로그인해서 작업하는 터미널 단위로 프로세스 그룹을 묶은 것

## 프로세스 실행 시간
- 시스템 실행 시간: 프로세스에서 커널의 코드를 수행한 시간
- 사용자 실행 시간: 사용자 모드에서 프로세스를 실행한 시간
- 프로세스 실행 시간을 측정하려면 times( ) 함수를 사용

## 환경 변수
- 환경 변수를 사용하면 프로세스 환경을 설정하거나 설정된 환경을 검색할 수 있음

--- 

## 프로세스의 정의
- 프로세스(Process) N:1 프로세서(Processor)
    - 프로세스: 실행 중인 프로그램을 의미
    - 프로세서: 인텔 코어 등과 같은 중앙 처리 장치(CPU)를 의미
    - 프로그램: 사용자가 컴퓨터에 작업을 시키기 위한 명령어의 집합
    // walltime(벽시계의 시간)이 아님


## 프로세스의 구조 
- 텍스트 영역 : 실행 코드를 저장, 텍스트 영역은 프로세스 실행 중에 크기가 변하지 않는 고정 영역에 속함
- 데이터 영역 : 프로그램에서 정의한 전역변수를 저장 
    - 전역 변수는 프로그램을 작성할 때 크기가 고정되므로 고정 영역에 할당
- 힙 영역 : 프로그램 실행 중에 동적으로 메모리를 요청하는 경우에 할당되는 영역
    - 빈 영역→할당→할당 해제처럼 상태가 변하는 가변 영역
- 스택 영역 : 프로그램에서 정의한 지역변수를 저장하는 메모리 영역으로, 지역 변수 를 정의 한 부분에서 할당해 사용
- 빈 공간 : 스택이나 힙과 같이 가변적인 메모리 할당을 위해 유지하고 있는 빈 메모리 영역
    - 프로세스에 할당된 빈 메모리 영역이 모두 소진되면 메모리 부족으로 프로그램 실행이 중단될 수도 있음

--- 

## 프로세스 목록 보기
- PS 명령
`~$ ps`

- 실행 중인 프로세스의 목록을 보려면 ps 명령을 사용
- 아무 옵션 없이 ps 명령을 사용하면 현재 터미널에서 실행한 프로세스만 출력
- 시스템에서 동작하고 있는 전체 프로세스를 보려면 `-ef 옵션`을 지정
`~$ ps -ef | more` // more명령어: 페이지 단위로 출력

ex. [~d] // [ ]는 커널이 만든 프로세스
         // ~d로 끝나면 demon프로세스로 마지막까지 살아있는 프로세스
    PID/PPID : 부모/자식 관계이다

## 시스템 메모리 정보 보기
- TOP 명령
    - 현재 실행 중인 프로세스를 주기적으로 확인해 출력
    - top 명령으로 확인할 수 있는 정보 중에서 메모리와 스왑 등에 관한 정보를 직접 검색하려면 sysinfo( ) 함수를 사용

ex. Linux의 우선순위는 140레벨로 100(커널값)+40(사용자/nice값)
    NI(nice value) : -20 ~ 19(Default:0), nagertive value로 -20이 우선순위
    PR(Priority): 100레벨의 값을 조정하는 값

--- 

## 메모리와 스왑 상태 검색 : sysinfo(2)
```
#include <sys/sysinfo.h>
int sysinfo(struct sysinfo *info);
```
info : 검색 결과를 리턴하는 sysinfo 구조체의 주소

- sysinfo 구조체에 검색 결과를 저장해 리턴
- sysinfo() 함수가 성공하면 sysinfo 구조체에 정보를 저정한 후 0을 리턴하고 오류가 발생하면 –1을 리턴

```
struct sysinfo {
long uptime;             // 시스템 부팅 후 경과된 시간을 초 단위로 저장
unsigned long loads[3];  // 시스템 부하 평균을 저장하는 배열로, 1분, 5분, 15분 기준으로 계산해 저장
unsigned long totalram;  // 사용 가능한 총 메모리 크기를 저장
unsigned long freeram;   // 사용 가능한 메모리의 크기를 저장
unsigned long sharedram; // 공유 메모리의 크기를 저장
unsigned long bufferram; // 버퍼가 사용하는 메모리의 크기를 저장
unsigned long totalswap; // 스왑 영역의 총 크기를 저장
unsigned long freeswap;  // 사용 가능한 스왑 영역의 크기를 저장
unsigned short procs;    // 현재 실행 중인 프로세스 수를 저장
unsigned long totalhigh; // 사용자에 할당된 메모리의 총 크기를 저장
unsigned long freehigh;  // 사용 가능한 사용자 메모리의 크기를 저장
unsigned int mem_unit;   // 메모리 크기를 바이트 단위로 저장
char _f[20-2*sizeof(long)-sizeof(int)]; // 64바이트 크기를 맞추기 위한 패딩
};
```
---

운영체제 기능 
1. **프로세스**
2. 메모리
3.파일시스템
4. 디바이스 I/O
5. 네트워크

---

# 프로세스 식별

## PID 검색: getpid(2)
```
#include <sys/types.h>
#include <unistd.h>
pid_t getpid(void);
```

- PID는 0번부터 시작

- 0번 프로세스: **스케줄러**로, 프로세스에 CPU 시간을 할당하는 역할 수행, 커널의 일부분이므로 **별도의 실행 파일은 없음**
- 1번 프로세스: init로 프로세스가 새로 생성될 때마다 기존 PID와 중복되지 않은 번호가 할당
- 현재 프로세스의 PID를 검색하려면 getpid() 함수를 사용

--- 

## init 프로세스

- 시스템 부팅 이후의 모든 프로세스의 최상위 부모 역할 수행
- 시스템의 초기화 및 서비스 관리를 담당

- 시스템 초기화
    - 커널이 부팅을 마친 후 가장 먼저 실행되는 사용자 공간 프로세스
        - /etc/inittab 파일(전통적인 init의 경우) 또는 /etc/systemd/system/ 디렉토리(systemd의 경우)에서 시스템 런레벨 또는 타겟에 따라 초기 설정 수행
    - 서비스 및 데몬 실행
        - 네트워크, 로그, GUI, 사용자 로그인 등 시스템 작동에 필요한 여러 서비스(데몬)를 실행
    - 런레벨 또는 타겟 관리
        - 시스템의 상태(예: 셧다운, 단일 사용자 모드, 멀티 사용자 모드 등)를 결정하고 전환
    - 자식 프로세스의 부모 역할
        - 고아가 된(부모가 종료된) 프로세스는 init이 부모가 되어 관리
        - `wait()` 또는 `waitpid()`를 통해 자식 프로세스의 종료 상태를 수집하여 좀비 프로세스가 되지 않도록 지원

--- 

## PPID 검색 : getppid(2)
```
#include <sys/types.h>
#include <unistd.h>
pid_t getppid(void);
```

- 부모 프로세스: 0번 프로세스를 제외한 모든 프로세스에는 자신을 생성한 프로세스
- PPID: 부모 프로세스의 PID
- 부모 프로세스의 PID를 검색하려면 getppid() 함수를 사용

--- 

## 프로세스 그룹 리더(Process Group Leader)
- 프로세스 그룹 내에서 중요한 역할을 하는 특별한 프로세스임
- 프로세스 그룹을 대표하는 프로세스임
    - 자신의 PID(프로세스 ID)가 그룹 ID(PGID)와 같은 프로세스가 그룹 리더 즉, pid == pgid인 프로세스

- 하나의 논리적인 단위로 묶인 여러 개의 프로세스 집합
- 주로 신호 전달(Signal), 작업 제어(Job Control) 등을 효율적으로 처리하기 위해 사용
    - 예: bash 셸에서 파이프라인 명령어 (cmd1 | cmd2 | cmd3)를 입력하면 이 명령어들이 하나의 프로세스 그룹으로 묶임


| 역할                      | 설명                                                              |
| ------------------------- | ----------------------------------------------------------------- |
| 1. 프로세스 그룹 대표      | 프로세스 그룹을 식별하는 대표 PID(PGID)로 사용됨                    |
| 2. 터미널 제어와 작업 제어 | 포어그라운드(foreground) / 백그라운드(background) 작업 제어 시 기준이 됨          |
| 3. 시그널 전달 대상       | `kill -<signal> -<pgid>` 명령으로 그룹 전체에 신호를 보낼 수 있음 (리더 포함)      |
| 4. 세션(session)과 연결   | 하나의 세션 내 여러 프로세스 그룹이 존재할 수 있으며, 세션 리더는 보통 가장 처음 생성된 그룹 리더가 맡음 |

포어그라운드(foreground): 추가적인 제어를 못함
- `\n`를 치면 기본적으로 작업실행
- `Ctrl + C`로 종료 시그널

백그라운드(background): 다른 프로그램 실행이 가능 ex. `sleep 300 & "\n"`
- 백그라운드 작업 코드에 printf가 있다면 터미널에 계속 표시되어 작업이 어려움
- 파일쓰기로 결과를 확인하는것을 추천

--- 

#  PGID 검색 : getpgrp(2), getpgid(2)
```
#include <sys/types.h>
#include <unistd.h>

pid_t getpgrp(void);
pid_t getpgid(pid_t pid);
```
pid : PGID를 구하려는 프로세스의 ID

- 이 함수를 호출하는 프로세스가 속한 그룹의 PGID를 리턴
- getpgid() 함수는 pid 인자로 지정한 프로세스가 속한 그룹의 PGID를 리턴
- 만일 인자가 0이면 getpgid() 함수를 호출한 프로세스의 PID를 리턴`pid_t getpgid(0)`

--- 

## pgid 변경 : setpgid(2) 
```
#include <sys/types.h>
#include <unistd.h>
int setpgid(pid_t pid, pid_t pgid);
```
pid : 프로세스 그룹에 속한 프로세스의 ID 
pgid : 새로 지정할 PGID

- pid가 가리키는 프로세스의 PGID를 pgid로 지정한 값으로 지정
- pid와 pgid가 같다면 pid에 해당하는 프로세스가 그룹 리더가 됨

- 만일 pid가 0이면 이 함수를 호출하는 현재 프로세스의 PID를 사용
- pgid가 0이면 pid로 지정한 프로세스가 PGID
```
1 #include <stdio.h>
2 #include <stdlib.h>
3 #include <unistd.h>
4 #include <sys/types.h>
5 
6 int main() {
7   pid_t pid;
8   pid = fork();   // 함수를 호출한 프로세스를 복사하는 기능
                    // 부모(자식pid 값을)와 자식(0을)이 return하여 두번 return
9   if (pid < 0) {
10      perror("fork 실패");
11      exit(EXIT_FAILURE);
12  } else if (pid == 0) {
13      // 자식 프로세스
14      printf("[자식] PID: %d, 부모 PID: %d\n", getpid(), getppid());
15      printf("[자식] 변경 전 PGID: %d\n", getpgrp());
16      // 자신을 새 프로세스 그룹의 그룹 리더로 만듦
17      if (setpgid(0, 0) == -1) {
18          perror("setpgid 실패");
19      } else {
20          printf("[자식] 변경 후 PGID: %d (자신이 그룹 리더)\n", getpgrp());
21      }
22      sleep(2); // 부모가 먼저 종료되지 않도록
23      exit(EXIT_SUCCESS); 
24  } else {
25      // 부모 프로세스
26      printf("[부모] PID: %d\n", getpid());
27      printf("[부모] PGID: %d\n", getpgrp());
28      wait(NULL); // 자식 프로세스 종료 대기
29  }
30  return 0;
31 }

```
--- 

## 세션
- POSIX 표준에서 제안한 개념으로 사용자가 로그인해 작업하고 있는 터미널 단위로 프로세스 그룹을 묶은 것
- 프로세스 그룹이 관련 있는 프로세스를 그룹으로 묶은 개념이라면, 세션은 관련 있는 프로세스 그룹을 모은 개념
- 프로세스 그룹 단위로 **작업 제어**를 수행할 때 사용


### 작업제어(job control)
- 셸(shell)에서 여러 작업을 동시에 실행하고, 백그라운드와 포그라운드로 전환하며, 일시 중지 및 재개하는 기능
    - 단일 셸 세션 내에서 다중 작업을 제어할 수 있는 인터페이스를 제공

### 핵심개념
| 용어            | 설명                                         |
|-----------------|--------------------------------------------|
| Job             | 셸이 관리하는 하나 이상의 프로세스 그룹 (예: `sleep 100 &`) |
| Foreground Job  | 현재 셸에서 입력을 받고 실행 중인 작업         |
| Background Job  | 백그라운드에서 실행되어 셸 입력을 차단하지 않는 작업 |
| Stopped Job     | 일시 중지된 작업 (예: `Ctrl + Z`로 중단됨)      |

- job도 id로 구분한다 ex.[1], [2], ...


### 주요 명령어
| 명령어        | 설명                                                       |
|---------------|------------------------------------------------------------|
| jobs          | 현재 셸에서 실행 중이거나 정지된 작업 목록을 표시             |
| fg [%job_id]  | 백그라운드 또는 정지된 작업을 포그라운드로 전환               |
| bg [%job_id]  | 정지된 작업을 백그라운드로 전환                              |
| kill [%job_id or PID] | 작업 또는 프로세스를 종료                            |
| Ctrl + Z      | 현재 포그라운드 작업을 일시 중지 (stop)                      |
| &             | 명령을 백그라운드에서 실행 (예: `sleep 100 &`)               |

--- 

## 세션 검색 : getsid(2)
```
#include <sys/types.h>
#include <unistd.h>
pid_t getsid(pid_t pid);
```
pid : 자신이 속한 세션의 ID를 구하려는 프로세스의 ID

- pid로 지정한 프로세스가 속한 세션의 ID를 리턴
- 만일 pid가 0이면 현재 프로세스의 세션 ID를 리턴
`pid_t getsid(getpid());`
`pid_t getsid(0);`

세션 Id
- 프로세스가 새로운 세션을 생성하면 해당 프로세스는 세션 리더가 되고 세션 리더의 PID는 세션 ID가 됨

--- 

## 세션 생성 : setsid(2)
```
#include <sys/types.h>
#include <unistd.h>
pid_t setsid(void);
```

- setsid() 함수를 사용하면 새로운 세션을 만들 수 있음
- setsid() 함수를 호출하는 프로세스가 프로세스 그룹 리더가 아니면 새로운 세션을 만들어 세션 리더가 됨
- 새로운 세션에서 프로세스 그룹 리더가 됨
- setsid() 함수를 호출한 프로세스가 새로운 세션과 프로세스 그룹의 유일한 프로세스가 됨
- 호출에 성공하면 새로운 세션 ID를 리턴하고 오류가 발생하면 –1 을 리턴

```
1 #include <stdio.h>
2 #include <stdlib.h>
3 #include <unistd.h>
4 #include <sys/types.h>
5 
6 int main() {
7 pid_t pid;
8 // 부모가 아닌 새로운 프로세스로 분기
9 pid = fork();
10 if (pid < 0) {
11 perror("fork 실패");
12 exit(EXIT_FAILURE);
13 }
14 if (pid > 0) {
15 // 부모는 종료 (자식만 남김)
16 printf("[부모] 종료\n");
17 exit(EXIT_SUCCESS);
18 } 
19 // 자식 프로세스
20 printf("[자식] PID: %d\n", getpid());
21 // setsid() 호출: 세션 리더가 되고 새 그룹을 생성
22 pid_t sid = setsid();
23 if (sid == -1) {
24 perror("setsid 실패");
25 exit(EXIT_FAILURE);
26 }
27 printf("[자식] 새 세션 생성 완료\n");
28 printf("SID (세션 ID): %d\n", sid);
29 printf("PGID (프로세스 그룹 ID): %d\n", getpgrp());
30 printf("PID: %d\n", getpid());
31
32 // 여기서부터 데몬화 등의 작업 가능
33 sleep(5); // 확인을 위해 대기
34 return 0;
35 }
```
--- 

## 새로운 세션 ID를 할당 받는 효과

- 새로운 세션 생성
    - 프로세스는 기존의 세션, 프로세스 그룹, 제어 터미널로부터 분리
    - 새로운 세션 ID와 프로세스 그룹 ID를 갖게 됨
- 세션 리더가 됨
    - 호출한 프로세스가 새로 만든 세션의 리더로 설정됨
    - 세션 리더는 그 세션에서 제어 터미널을 획득할 수 있는 유일한 프로세스임
- 제어 터미널을 가질 수 없음
    - 세션 생성 시점에는 제어 터미널이 분리됨
    - 터미널로부터 발생하는 시그널(예: SIGHUP, SIGINT)로부터 독립

| 상황                 | 설명                                                           |
|----------------------|--------------------------------------------------------------|
| 데몬 프로세스 생성     | 백그라운드에서 독립적으로 동작해야 하는 데몬은 `setsid()`를 호출해 터미널과 분리된 세션에서 실행됨 |
| 터미널 로그아웃과 무관 | 사용자가 로그아웃해도 프로세스가 종료되지 않음 (제어 터미널이 없기 때문에 `SIGHUP`을 받지 않음) |
| tty로부터의 독립      | TTY 입력을 받지 않고 완전히 독립적인 환경에서 실행 가능           |

--- 

# 프로세스 실행 시간 측정

## 프로세스 실행 시간
- 프로세스 실행 시간 측정의 의의와 방법
    - 시간 정보를 이용해 프로세스 실행 시간을 측정할 수 있으며, 이것은 시스템 사용 요금을 결정하는 데 활용할 수 있음
    - 프로그램에서 많은 시간을 소비하는 부분을 찾아 개선하는 데도 활용할 수 있음
    - 프로세스 실행 시간은 times() 함수를 사용해 측정할 수 있음
    - 프로세스 실행 시간은 커널 모드에 서 실행한 시간과 사용자 모드에서 실행한 시간을 합해 구할 수 있음
    - times() 함수는 커널 모드에 서 실행한 시간과 사용자 모드에서 실행한 시간을 구분해서 알려줌
- 프로세스 실행 시간의 구성
    - 시스템 실행 시간: 프로세스에서 커널의 코드를 수행한 시간으로, 시스템 호출로 소비한 시간을 의미
- 사용자 실행 시간: 사용자 모드에서 프로세스를 실행한 시간으로, 프로그램 내부의 함수나 반복문처럼 사용자가 작성한 코드를 실행하는 데 걸린 시간

*프로세스 실행 시간 = 시스템 실행 시간 + 사용자 실행 시간*

--- 

## tms 구조체
```sys/times.h
struct tms {
clock_t tms_utime; // times() 함수를 호출한 프로세스가 사용한 사용자 모드 실행 시간
clock_t tms_stime; // times() 함수를 호출한 프로세스가 사용한 시스템(커널) 모드 실행 시간
clock_t tms_cutime; // times() 함수를 호출한 프로세스의 모든 자식 프로세스가 사용한 사용자 모드/실행 시간과 tms_utime의 합계 시간
clock_t tms_cstime; // times() 함수를 호출한 프로세스의 모든 자식 프로세스가 사용한 시스템 모드/실행 시간과 tms_stime의 합계 시간
};
```

--- 

## 실행 시간 측정 : times(2)
```
#include <sys/times.h>
clock_t times(struct tms *buf);
```
buf : 실행 시간을 저장할 tms 구조체의 주소

- 프로세스 실행 시간을 인자로 지정한 tms 구조체에 저장
- times() 함수가 알려주는 시간 단위는 시계의 클록 틱
- times() 함수는 임의의 시점으로부터 경과된 클록 틱 수를 리턴하고 오류가 발생하면 –1을 리턴
```
01 #include <sys/types.h>
02 #include <sys/times.h>
03 #include <time.h>
04 #include <unistd.h>
05 #include <stdlib.h>
06 #include <stdio.h>
07
08 int main() {
09  int i;
10  time_t t;
11  struct tms buf;
12  clock_t ct, t1, t2;
13
14  ct = sysconf(_SC_CLK_TCK); // 초당 클록 틱 수 (Hz)
15  printf("Clock tick : %ld\n", ct);
16
17  if ((t1 = times(&buf)) == -1) {
18      perror("times 1");
19      exit(1);
20  }
21
22  for (i = 0; i < 99999999; i++)
23      time(&t); // cpu 사용시간 늘리기기
24  sleep(1); // walltime 늘리기
25
26  if ((t2 = times(&buf)) == -1) {
27      perror("times 2");
28      exit(1);
29  }
30
31  printf("t1: %ld\n", t1);
32  printf("t2: %ld\n", t2);
33  printf("utime : %ld\n", buf.tms_utime);
34  printf("stime : %ld\n", buf.tms_stime);
35  printf("Real time : %.1f sec\n", (double)(t2 - t1) / ct);
36  printf("User time : %.1f sec\n", (double)buf.tms_utime / ct);
37  printf("System time : %.1f sec\n", (double)buf.tms_stime / ct);
38 }
```
--- 

# 환경 변수
- 환경 변수는 ‘환경 변수명=값' 형태로 구성
- 환경 변수명은 관례적으로 대문자를 사용
- 환경 변수는 셸에서 값을 설정하거나 변경할 수 있으며 함수를 이용해 읽거나 설정할 수 있음
- 현재 셸의 환경 설정을 보려면 `env 명령`을 사용


