# 프로세스(Process)
- 현재 실행중인 프로그램을 의미

Multi processing: CPU가 2개이상이어서 process를 동시에 처리할수 있음
Multi programming: CPU는 1개지만 process를 동시에 처리하는 것처럼 스케줄링

- 현재 리눅스 시스템에서 실행 중인 프로세스를 확인하려면 ps, top 명령을 사용
- 시스템에서 프로세스를 식별하는 데는 프로세스 ID(PID)를 사용하고, 관련 프로세스들이 모여 프로세스 그룹을 구성

## 세션(Sessions)
- POSIX 표준에서 제안한 개념으로, 사용자가 로그인해서 작업하는 터미널 단위로 프로세스 그룹을 묶은 것

## 프로세스 실행 시간
- 시스템 실행 시간: 프로세스에서 커널의 코드를 수행한 시간
- 사용자 실행 시간: 사용자 모드에서 프로세스를 실행한 시간
- 프로세스 실행 시간을 측정하려면 times( ) 함수를 사용

## 환경 변수
- 환경 변수를 사용하면 프로세스 환경을 설정하거나 설정된 환경을 검색할 수 있음

--- 

## 프로세스의 정의
- 프로세스(Process) N:1 프로세서(Processor)
    - 프로세스: 실행 중인 프로그램을 의미
    - 프로세서: 인텔 코어 등과 같은 중앙 처리 장치(CPU)를 의미
    - 프로그램: 사용자가 컴퓨터에 작업을 시키기 위한 명령어의 집합
    // walltime(벽시계의 시간)이 아님


## 프로세스의 구조 
- 텍스트 영역 : 실행 코드를 저장, 텍스트 영역은 프로세스 실행 중에 크기가 변하지 않는 고정 영역에 속함
- 데이터 영역 : 프로그램에서 정의한 전역변수를 저장 
    - 전역 변수는 프로그램을 작성할 때 크기가 고정되므로 고정 영역에 할당
- 힙 영역 : 프로그램 실행 중에 동적으로 메모리를 요청하는 경우에 할당되는 영역
    - 빈 영역→할당→할당 해제처럼 상태가 변하는 가변 영역
- 스택 영역 : 프로그램에서 정의한 지역변수를 저장하는 메모리 영역으로, 지역 변수 를 정의 한 부분에서 할당해 사용
- 빈 공간 : 스택이나 힙과 같이 가변적인 메모리 할당을 위해 유지하고 있는 빈 메모리 영역
    - 프로세스에 할당된 빈 메모리 영역이 모두 소진되면 메모리 부족으로 프로그램 실행이 중단될 수도 있음

--- 

## 프로세스 목록 보기
- PS 명령
`~$ ps`

- 실행 중인 프로세스의 목록을 보려면 ps 명령을 사용
- 아무 옵션 없이 ps 명령을 사용하면 현재 터미널에서 실행한 프로세스만 출력
- 시스템에서 동작하고 있는 전체 프로세스를 보려면 `-ef 옵션`을 지정
`~$ ps -df | more` // more명령어: 페이지 단위로 출력

ex. [~d] // [ ]는 커널이 만든 프로세스
         // ~d로 끝나면 demon프로세스로 마지막까지 살아있는 프로세스
    PID/PPID : 부모/자식 관계이다

## 시스템 메모리 정보 보기
- TOP 명령
    - 현재 실행 중인 프로세스를 주기적으로 확인해 출력
    - top 명령으로 확인할 수 있는 정보 중에서 메모리와 스왑 등에 관한 정보를 직접 검색하려면 sysinfo( ) 함수를 사용

ex. Linux의 우선순위는 140레벨로 100(커널값)+40(사용자/nice값)
    NI(nice value) : -20 ~ 19(Default:0), nagertive value로 -20이 우선순위
    PR(Priority): 100레벨의 값을 조정하는 값

--- 

## 메모리와 스왑 상태 검색 : sysinfo(2)
```
#include <sys/sysinfo.h>
int sysinfo(struct sysinfo *info);
```
info : 검색 결과를 리턴하는 sysinfo 구조체의 주소

- sysinfo 구조체에 검색 결과를 저장해 리턴
- sysinfo() 함수가 성공하면 sysinfo 구조체에 정보를 저정한 후 0을 리턴하고 오류가 발생하면 –1을 리턴

```
struct sysinfo {
long uptime;             // 시스템 부팅 후 경과된 시간을 초 단위로 저장
unsigned long loads[3];  // 시스템 부하 평균을 저장하는 배열로, 1분, 5분, 15분 기준으로 계산해 저장
unsigned long totalram;  // 사용 가능한 총 메모리 크기를 저장
unsigned long freeram;   // 사용 가능한 메모리의 크기를 저장
unsigned long sharedram; // 공유 메모리의 크기를 저장
unsigned long bufferram; // 버퍼가 사용하는 메모리의 크기를 저장
unsigned long totalswap; // 스왑 영역의 총 크기를 저장
unsigned long freeswap;  // 사용 가능한 스왑 영역의 크기를 저장
unsigned short procs;    // 현재 실행 중인 프로세스 수를 저장
unsigned long totalhigh; // 사용자에 할당된 메모리의 총 크기를 저장
unsigned long freehigh;  // 사용 가능한 사용자 메모리의 크기를 저장
unsigned int mem_unit;   // 메모리 크기를 바이트 단위로 저장
char _f[20-2*sizeof(long)-sizeof(int)]; // 64바이트 크기를 맞추기 위한 패딩
};
```

